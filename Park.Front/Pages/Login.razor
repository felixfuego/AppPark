@page "/login"
@using Park.Front.Services
@using Park.Comun.DTOs
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Iniciar Sesión - Park.Front</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>Iniciar Sesión</h2>
            <p>Accede a tu cuenta de Park.Front</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="username">Nombre de Usuario</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" placeholder="Ingresa tu nombre de usuario" />
                <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Ingresa tu contraseña" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <div class="form-group form-check">
                <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                <label for="rememberMe" class="form-check-label">Recordarme</label>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Iniciando sesión...</span>
                }
                else
                {
                    <span>Iniciar Sesión</span>
                }
            </button>
        </EditForm>

        <div class="login-footer">
            <p class="text-center">
                ¿Necesitas crear una cuenta? 
                <a href="/register" class="text-primary">Contacta al administrador</a>
            </p>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.Success)
            {
                successMessage = "¡Inicio de sesión exitoso!";
                await Task.Delay(1000); // Pequeña pausa para mostrar el mensaje
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
