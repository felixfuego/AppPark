@page "/zones"
@using Park.Front.Services
@using Park.Comun.DTOs
@using Park.Front.Components
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject SitioService SitioService
@inject ZonaService ZonaService

<PageTitle>Gestión de Zonas - Park.Front</PageTitle>

<RoleGuard RequiredRole="Admin">

<div class="zones-container">
    <div class="page-header">
        <div class="page-title">
            <h1>Gestión de Zonas</h1>
            <p>Administra las zonas del sistema</p>
        </div>
        <div class="page-actions">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle"></i>
                Nueva Zona
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Cargando zonas...</p>
        </div>
    }
    else
    {
        <div class="zones-table-container">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Sitio</th>
                            <th>Capacidad</th>
                            <th>Estado</th>
                            <th>Fecha Creación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var zone in zones)
                        {
                            <tr>
                                <td>
                                    <div class="zone-info">
                                        <strong>@zone.Nombre</strong>
                                    </div>
                                </td>
                                <td>@zone.Descripcion</td>
                                <td>@(zone.Sitio?.Nombre ?? "N/A")</td>
                                <td>N/A</td>
                                <td>
                                    @if (zone.IsActive)
                                    {
                                        <span class="badge bg-success">Activo</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Inactivo</span>
                                    }
                                </td>
                                <td>@zone.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(zone)" title="Editar">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        @if (zone.IsActive)
                                        {
                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => DeactivateZone(zone.Id)" title="Desactivar">
                                                <i class="bi bi-pause-circle"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-success" @onclick="() => ActivateZone(zone.Id)" title="Activar">
                                                <i class="bi bi-play-circle"></i>
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteZone(zone.Id)" title="Eliminar">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<!-- Modal para crear/editar zona -->
@if (showModal)
{
    <div class="modal-backdrop show" @onclick="HideModal"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Zona" : "Nueva Zona")</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentZone" OnValidSubmit="@HandleSave">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="name">Nombre de la Zona</label>
                                    <InputText id="name" @bind-Value="currentZone.Name" class="form-control" />
                                    <ValidationMessage For="@(() => currentZone.Name)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="capacity">Capacidad</label>
                                    <InputNumber id="capacity" @bind-Value="currentZone.Capacity" class="form-control" />
                                    <ValidationMessage For="@(() => currentZone.Capacity)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="description">Descripción</label>
                            <InputTextArea id="description" @bind-Value="currentZone.Description" class="form-control" rows="3" />
                            <ValidationMessage For="@(() => currentZone.Description)" class="text-danger" />
                        </div>

                        <div class="form-group">
                            <label for="siteId">Sitio</label>
                            <InputSelect id="siteId" @bind-Value="currentZone.SiteId" class="form-control">
                                <option value="">Seleccionar sitio...</option>
                                @foreach (var site in availableSites)
                                {
                                    <option value="@site.Id">@site.Nombre</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => currentZone.SiteId)" class="text-danger" />
                        </div>

                        @if (isEditing)
                        {
                            <div class="form-group">
                                <div class="form-check">
                                    <InputCheckbox id="isActive" @bind-Value="currentZone.IsActive" class="form-check-input" />
                                    <label for="isActive" class="form-check-label">Zona Activa</label>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                @(isEditing ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

</RoleGuard>

@code {
    private List<ZonaDto> zones = new();
    private List<SitioDto> availableSites = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private ZoneModel currentZone = new();
    private int editingZoneId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Cargar sitios reales desde el API
            availableSites = await SitioService.GetAllSitiosAsync();
            
            // Cargar zonas reales desde el API
            zones = await ZonaService.GetAllZonasAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error cargando zonas: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        currentZone = new ZoneModel();
        isEditing = false;
        showModal = true;
        errorMessage = string.Empty;
    }

    private void ShowEditModal(ZonaDto zone)
    {
        editingZoneId = zone.Id;
        currentZone = new ZoneModel
        {
            Name = zone.Nombre,
            Description = zone.Descripcion,
            SiteId = zone.IdSitio,
            Capacity = 0, // No hay capacidad en el DTO
            IsActive = zone.IsActive
        };
        isEditing = true;
        showModal = true;
        errorMessage = string.Empty;
    }

    private void HideModal()
    {
        showModal = false;
        errorMessage = string.Empty;
    }

    private async Task HandleSave()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;

            if (isEditing)
            {
                var updateDto = new UpdateZonaDto
                {
                    Id = editingZoneId,
                    Nombre = currentZone.Name,
                    Descripcion = currentZone.Description,
                    IdSitio = currentZone.SiteId,
                    IsActive = currentZone.IsActive
                };
                
                await ZonaService.UpdateZonaAsync(updateDto);
                await JSRuntime.InvokeVoidAsync("appUtils.showAlert", "Zona actualizada exitosamente", "success");
            }
            else
            {
                var createDto = new CreateZonaDto
                {
                    Nombre = currentZone.Name,
                    Descripcion = currentZone.Description,
                    IdSitio = currentZone.SiteId
                };
                
                await ZonaService.CreateZonaAsync(createDto);
                await JSRuntime.InvokeVoidAsync("appUtils.showAlert", "Zona creada exitosamente", "success");
            }

            await LoadData();
            HideModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error guardando zona: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ActivateZone(int zoneId)
    {
        try
        {
            var zone = zones.FirstOrDefault(z => z.Id == zoneId);
            if (zone != null)
            {
                zone.IsActive = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error activando zona: {ex.Message}";
        }
    }

    private async Task DeactivateZone(int zoneId)
    {
        try
        {
            var zone = zones.FirstOrDefault(z => z.Id == zoneId);
            if (zone != null)
            {
                zone.IsActive = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error desactivando zona: {ex.Message}";
        }
    }

    private async Task DeleteZone(int zoneId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que quieres eliminar esta zona?");
        if (confirmed)
        {
            try
            {
                zones.RemoveAll(z => z.Id == zoneId);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error eliminando zona: {ex.Message}";
            }
        }
    }

    // Modelos temporales
    public class ZoneDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int SiteId { get; set; }
        public string SiteName { get; set; } = string.Empty;
        public int Capacity { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class ZoneModel
    {
        [Required(ErrorMessage = "El nombre de la zona es requerido")]
        [StringLength(100, ErrorMessage = "El nombre no puede exceder 100 caracteres")]
        public string Name { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "La descripción no puede exceder 500 caracteres")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Debe seleccionar un sitio")]
        public int SiteId { get; set; }

        [Required(ErrorMessage = "La capacidad es requerida")]
        [Range(1, 1000, ErrorMessage = "La capacidad debe estar entre 1 y 1000")]
        public int Capacity { get; set; }

        public bool IsActive { get; set; } = true;
    }

    public class SiteDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
