@page "/colaboradores"
@using Park.Front.Services
@using Park.Comun.DTOs
@using Park.Front.Components
@using Park.Front.Pages.Shared
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject ColaboradorService ColaboradorService
@inject CompanyService CompanyService
@inject SitioService SitioService
@inject ZonaService ZonaService
@inject CentroService CentroService

<PageTitle>Gestión de Colaboradores - Park.Front</PageTitle>

<RoleGuard RequiredRole="Admin">

<div class="colaboradores-container management-page">
    <div class="page-header">
        <div class="page-title">
            <h1>Gestión de Colaboradores</h1>
            <p>Administra los colaboradores del sistema</p>
        </div>
        <div class="page-actions">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle"></i>
                Nuevo Colaborador
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Cargando colaboradores...</p>
        </div>
    }
    else
    {
        <div class="colaboradores-table-container">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Identidad</th>
                            <th>Nombre</th>
                            <th>Puesto</th>
                            <th>Compañía</th>
                            <th>Teléfono</th>
                            <th>Email</th>
                            <th>Estado</th>
                            <th>Lista Negra</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var colaborador in filteredColaboradores)
                        {
                            <tr>
                                <td>
                                    <div class="colaborador-info">
                                        <strong>@colaborador.Identidad</strong>
                                    </div>
                                </td>
                                <td>@colaborador.Nombre</td>
                                <td>@colaborador.Puesto</td>
                                <td>@colaborador.Compania?.Name</td>
                                <td>@colaborador.Tel1</td>
                                <td>@colaborador.Email</td>
                                <td>
                                    @if (colaborador.IsActive)
                                    {
                                        <span class="badge bg-success">Activo</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Inactivo</span>
                                    }
                                </td>
                                <td>
                                    @if (colaborador.IsBlackList)
                                    {
                                        <span class="badge bg-warning">Lista Negra</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Normal</span>
                                    }
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(colaborador)" title="Editar">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        @if (colaborador.IsActive)
                                        {
                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => DeactivateColaborador(colaborador.Id)" title="Desactivar">
                                                <i class="bi bi-pause-circle"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-success" @onclick="() => ActivateColaborador(colaborador.Id)" title="Activar">
                                                <i class="bi bi-play-circle"></i>
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-outline-info" @onclick="() => ToggleBlackList(colaborador.Id)" title="Toggle Lista Negra">
                                            <i class="bi bi-shield-exclamation"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteColaborador(colaborador.Id)" title="Eliminar">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</div>

<!-- Modal para crear/editar colaborador -->
@if (showModal)
{
    <div class="modal-backdrop show" @onclick="HideModal"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-xxl compact">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-user-plus me-2"></i>
                        @(isEditing ? "Editar Colaborador" : "Nuevo Colaborador")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideModal"></button>
                </div>
                <div class="modal-body p-4">
                    <EditForm Model="@currentColaborador" OnValidSubmit="@HandleSave">
                        <DataAnnotationsValidator />
                        
                        <!-- Sección de Ubicación y Acceso -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-map-marker-alt me-2"></i>
                                    Ubicación y Centros de Acceso
                                </h6>
                            </div>
                            <div class="card-body">
                                <CascadaSelection 
                                    IdSitio="currentColaborador.IdSitio" 
                                    IdSitioChanged="OnSitioChanged"
                                    IdZona="currentColaborador.IdZona" 
                                    IdZonaChanged="OnZonaChanged"
                                    IdEmpresa="currentColaborador.IdCompania" 
                                    IdEmpresaChanged="OnEmpresaChanged"
                                    SelectedCentroIds="selectedCentroIds" 
                                    SelectedCentroIdsChanged="OnCentroIdsChanged" />
                            </div>
                        </div>

                        <!-- Sección de Información Personal -->
                        <div class="card mb-12">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-user me-2"></i>
                                    Información Personal
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row g-3">
                                    <div class="col-lg-12 col-md-12">
                                        <div class="mb-3">
                                            <label for="identidad" class="form-label fw-bold">Identidad *</label>
                                            <InputText id="identidad" @bind-Value="currentColaborador.Identidad" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="Número de identidad" />
                                            <ValidationMessage For="@(() => currentColaborador.Identidad)" class="text-danger small" />
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label for="nombre" class="form-label fw-bold">Nombre Completo *</label>
                                            <InputText id="nombre" @bind-Value="currentColaborador.Nombre" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="Nombre completo del colaborador" />
                                            <ValidationMessage For="@(() => currentColaborador.Nombre)" class="text-danger small" />
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label for="puesto" class="form-label fw-bold">Puesto *</label>
                                            <InputText id="puesto" @bind-Value="currentColaborador.Puesto" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="Cargo o puesto de trabajo" />
                                            <ValidationMessage For="@(() => currentColaborador.Puesto)" class="text-danger small" />
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label for="email" class="form-label fw-bold">Email</label>
                                            <InputText id="email" @bind-Value="currentColaborador.Email" type="email" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="correo@ejemplo.com" />
                                            <ValidationMessage For="@(() => currentColaborador.Email)" class="text-danger small" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Sección de Contacto -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-phone me-2"></i>
                                    Información de Contacto
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row g-3">
                                    <div class="col-lg-6 col-md-6">
                                        <div class="mb-3">
                                            <label for="tel1" class="form-label fw-bold">Teléfono Principal *</label>
                                            <InputText id="tel1" @bind-Value="currentColaborador.Tel1" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="Número principal" />
                                            <ValidationMessage For="@(() => currentColaborador.Tel1)" class="text-danger small" />
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6">
                                        <div class="mb-3">
                                            <label for="tel2" class="form-label">Teléfono Secundario</label>
                                            <InputText id="tel2" @bind-Value="currentColaborador.Tel2" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="Número secundario" />
                                            <ValidationMessage For="@(() => currentColaborador.Tel2)" class="text-danger small" />
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-12">
                                        <div class="mb-3">
                                            <label for="tel3" class="form-label">Teléfono Adicional</label>
                                            <InputText id="tel3" @bind-Value="currentColaborador.Tel3" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="Número adicional" />
                                            <ValidationMessage For="@(() => currentColaborador.Tel3)" class="text-danger small" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Sección de Vehículo y Comentarios -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-car me-2"></i>
                                    Información Adicional
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row g-3">
                                    <div class="col-lg-6 col-md-6">
                                        <div class="mb-3">
                                            <label for="placa" class="form-label">Placa del Vehículo</label>
                                            <InputText id="placa" @bind-Value="currentColaborador.PlacaVehiculo" 
                                                      class="form-control form-control-lg" 
                                                      placeholder="ABC-1234 (opcional)" />
                                            <ValidationMessage For="@(() => currentColaborador.PlacaVehiculo)" class="text-danger small" />
                                        </div>
                                    </div>
                                    <div class="col-sm-12 col-md-12">
                                        <div class="mb-3">
                                            <label for="comentario" class="form-label">Comentarios</label>
                                            <InputTextArea id="comentario" @bind-Value="currentColaborador.Comentario" 
                                                          class="form-control" rows="3" 
                                                          placeholder="Observaciones adicionales..." />
                                            <ValidationMessage For="@(() => currentColaborador.Comentario)" class="text-danger small" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Sección de Estado -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-cog me-2"></i>
                                    Estado del Colaborador
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row g-3">
                                    @if (isEditing)
                                    {
                                        <div class="col-lg-6 col-md-6">
                                            <div class="form-check form-switch">
                                                <InputCheckbox id="isActive" @bind-Value="currentColaborador.IsActive" 
                                                              class="form-check-input" />
                                                <label for="isActive" class="form-check-label fw-bold">
                                                    <i class="fas fa-toggle-on me-1"></i>
                                                    Colaborador Activo
                                                </label>
                                            </div>
                                        </div>
                                    }
                                    <div class="col-lg-6 col-md-6">
                                        <div class="form-check form-switch">
                                            <InputCheckbox id="isBlackList" @bind-Value="currentColaborador.IsBlackList" 
                                                          class="form-check-input" />
                                            <label for="isBlackList" class="form-check-label fw-bold text-danger">
                                                <i class="fas fa-ban me-1"></i>
                                                Lista Negra
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer bg-light border-top">
                            <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="HideModal">
                                <i class="fas fa-times me-2"></i>
                                Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                }
                                @(isEditing ? "Actualizar Colaborador" : "Crear Colaborador")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

</RoleGuard>

@code {
    private List<ColaboradorDto> colaboradores = new();
    private List<ColaboradorDto> filteredColaboradores = new();
    private List<int> selectedCentroIds = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private ColaboradorModel currentColaborador = new();
    private int editingColaboradorId = 0;

    // Filtros
    private string filterCompania = string.Empty;
    private bool filterActivos = true;
    private bool filterListaNegra = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Cargar datos reales
            colaboradores = await ColaboradorService.GetAllColaboradoresAsync();
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error cargando colaboradores: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var query = colaboradores.AsEnumerable();

        // Filtrar por compañía
        if (!string.IsNullOrEmpty(filterCompania) && int.TryParse(filterCompania, out int companiaId))
        {
            query = query.Where(c => c.IdCompania == companiaId);
        }

        // Filtrar por estado activo
        if (filterActivos)
        {
            query = query.Where(c => c.IsActive);
        }

        // Filtrar por lista negra
        if (filterListaNegra)
        {
            query = query.Where(c => c.IsBlackList);
        }

        filteredColaboradores = query.ToList();
    }

    private void ShowCreateModal()
    {
        currentColaborador = new ColaboradorModel();
        selectedCentroIds.Clear();
        isEditing = false;
        showModal = true;
        errorMessage = string.Empty;
    }

    private async void ShowEditModal(ColaboradorDto colaborador)
    {
        editingColaboradorId = colaborador.Id;
        currentColaborador = new ColaboradorModel
        {
            IdSitio = colaborador.IdSitio,
            IdCompania = colaborador.IdCompania,
            IdZona = colaborador.IdZona,
            Identidad = colaborador.Identidad,
            Nombre = colaborador.Nombre,
            Puesto = colaborador.Puesto,
            Email = colaborador.Email,
            Tel1 = colaborador.Tel1,
            Tel2 = colaborador.Tel2,
            Tel3 = colaborador.Tel3,
            PlacaVehiculo = colaborador.PlacaVehiculo,
            Comentario = colaborador.Comentario,
            IsActive = colaborador.IsActive,
            IsBlackList = colaborador.IsBlackList
        };
        
        // Cargar centros seleccionados del colaborador
        selectedCentroIds = colaborador.ColaboradorByCentros?.Select(cbc => cbc.IdCentro).ToList() ?? new List<int>();
        
        isEditing = true;
        showModal = true;
        errorMessage = string.Empty;
    }

    private void HideModal()
    {
        showModal = false;
        errorMessage = string.Empty;
    }

    private async Task OnSitioChanged(int sitioId)
    {
        currentColaborador.IdSitio = sitioId;
        StateHasChanged();
    }

    private async Task OnZonaChanged(int zonaId)
    {
        currentColaborador.IdZona = zonaId;
        StateHasChanged();
    }

    private async Task OnEmpresaChanged(int empresaId)
    {
        currentColaborador.IdCompania = empresaId;
        StateHasChanged();
    }

    private async Task OnCentroIdsChanged(List<int> centroIds)
    {
        selectedCentroIds = centroIds;
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;

            if (isEditing)
            {
                var updateDto = new UpdateColaboradorDto
                {
                    Id = editingColaboradorId,
                    IdSitio = currentColaborador.IdSitio,
                    IdZona = currentColaborador.IdZona,
                    IdCompania = currentColaborador.IdCompania,
                    Identidad = currentColaborador.Identidad,
                    Nombre = currentColaborador.Nombre,
                    Puesto = currentColaborador.Puesto,
                    Email = currentColaborador.Email,
                    Tel1 = currentColaborador.Tel1,
                    Tel2 = currentColaborador.Tel2,
                    Tel3 = currentColaborador.Tel3,
                    PlacaVehiculo = currentColaborador.PlacaVehiculo,
                    Comentario = currentColaborador.Comentario,
                    IsActive = currentColaborador.IsActive,
                    IsBlackList = currentColaborador.IsBlackList,
                    CentroIds = selectedCentroIds
                };
                await ColaboradorService.UpdateColaboradorAsync(updateDto);
            }
            else
            {
                var createDto = new CreateColaboradorDto
                {
                    IdSitio = currentColaborador.IdSitio,
                    IdZona = currentColaborador.IdZona,
                    IdCompania = currentColaborador.IdCompania,
                    Identidad = currentColaborador.Identidad,
                    Nombre = currentColaborador.Nombre,
                    Puesto = currentColaborador.Puesto,
                    Email = currentColaborador.Email,
                    Tel1 = currentColaborador.Tel1,
                    Tel2 = currentColaborador.Tel2,
                    Tel3 = currentColaborador.Tel3,
                    PlacaVehiculo = currentColaborador.PlacaVehiculo,
                    Comentario = currentColaborador.Comentario,
                    IsBlackList = currentColaborador.IsBlackList,
                    CentroIds = selectedCentroIds
                };
                await ColaboradorService.CreateColaboradorAsync(createDto);
            }

            await LoadData();
            HideModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error guardando colaborador: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ActivateColaborador(int id)
    {
        try
        {
            await ColaboradorService.ActivateColaboradorAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error activando colaborador: {ex.Message}";
        }
    }

    private async Task DeactivateColaborador(int id)
    {
        try
        {
            await ColaboradorService.DeactivateColaboradorAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error desactivando colaborador: {ex.Message}";
        }
    }

    private async Task ToggleBlackList(int id)
    {
        try
        {
            await ColaboradorService.ToggleBlackListAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error cambiando estado de lista negra: {ex.Message}";
        }
    }

    private async Task DeleteColaborador(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que quieres eliminar este colaborador?");
        if (confirmed)
        {
            try
            {
                await ColaboradorService.DeleteColaboradorAsync(id);
                await LoadData();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error eliminando colaborador: {ex.Message}";
            }
        }
    }

    public class ColaboradorModel
    {
        [Required(ErrorMessage = "El sitio es requerido")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar un sitio")]
        public int IdSitio { get; set; }

        [Required(ErrorMessage = "La compañía es requerida")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una compañía")]
        public int IdCompania { get; set; }

        [Required(ErrorMessage = "La zona es requerida")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una zona")]
        public int IdZona { get; set; }

        [Required(ErrorMessage = "La identidad es requerida")]
        [StringLength(20, MinimumLength = 10, ErrorMessage = "La identidad debe tener entre 10 y 20 caracteres")]
        [RegularExpression("^[0-9]+$", ErrorMessage = "La identidad solo puede contener números")]
        public string Identidad { get; set; } = string.Empty;

        [Required(ErrorMessage = "El nombre es requerido")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "El nombre debe tener entre 2 y 100 caracteres")]
        [RegularExpression("^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$", ErrorMessage = "El nombre solo puede contener letras y espacios")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El puesto es requerido")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "El puesto debe tener entre 2 y 100 caracteres")]
        public string Puesto { get; set; } = string.Empty;

        [EmailAddress(ErrorMessage = "El formato del email no es válido")]
        [StringLength(100, ErrorMessage = "El email no puede exceder 100 caracteres")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "El teléfono principal es requerido")]
        [StringLength(20, MinimumLength = 8, ErrorMessage = "El teléfono debe tener entre 8 y 20 caracteres")]
        [RegularExpression("^[0-9\\+\\-\\(\\)\\s]+$", ErrorMessage = "El teléfono solo puede contener números, espacios, paréntesis, guiones y el símbolo +")]
        public string Tel1 { get; set; } = string.Empty;

        [StringLength(20, MinimumLength = 8, ErrorMessage = "El teléfono secundario debe tener entre 8 y 20 caracteres")]
        [RegularExpression("^[0-9\\+\\-\\(\\)\\s]+$", ErrorMessage = "El teléfono secundario solo puede contener números, espacios, paréntesis, guiones y el símbolo +")]
        public string Tel2 { get; set; } = string.Empty;

        [StringLength(20, MinimumLength = 8, ErrorMessage = "El teléfono adicional debe tener entre 8 y 20 caracteres")]
        [RegularExpression("^[0-9\\+\\-\\(\\)\\s]+$", ErrorMessage = "El teléfono adicional solo puede contener números, espacios, paréntesis, guiones y el símbolo +")]
        public string Tel3 { get; set; } = string.Empty;

        [StringLength(20, ErrorMessage = "La placa del vehículo no puede exceder 20 caracteres")]
        [RegularExpression("^[a-zA-Z0-9\\-\\s]*$", ErrorMessage = "La placa solo puede contener letras, números, guiones y espacios")]
        public string PlacaVehiculo { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "El comentario no puede exceder 500 caracteres")]
        public string Comentario { get; set; } = string.Empty;

        public bool IsActive { get; set; } = true;
        public bool IsBlackList { get; set; } = false;
    }
}
