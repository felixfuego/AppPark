@page "/companies"
@using Park.Front.Services
@using Park.Comun.DTOs
@using Park.Front.Components
@using Park.Front.Pages.Shared
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject CompanyService CompanyService
@inject SitioService SitioService
@inject CentroService CentroService
@inject ZonaService ZonaService

<PageTitle>Gestión de Empresas - Park.Front</PageTitle>

<RoleGuard RequiredRole="Admin">

<div class="companies-container">
    <div class="page-header">
        <div class="page-title">
            <h1>Gestión de Empresas</h1>
            <p>Administra las empresas del sistema</p>
        </div>
        <div class="page-actions">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle"></i>
                Nueva Empresa
            </button>
            <button class="btn btn-info ms-2" @onclick="TestDebugData">
                <i class="bi bi-bug"></i>
                Debug Data
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Cargando empresas...</p>
        </div>
    }
    else
    {
        <div class="companies-table-container">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Sitio</th>
                            <th>Centros</th>
                            <th>Estado</th>
                            <th>Fecha Creación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var company in companies)
                        {
                            <tr>
                                <td>
                                    <div class="company-info">
                                        <strong>@company.Name</strong>
                                    </div>
                                </td>
                                <td>@company.Description</td>
                                <td>@company.Sitio?.Nombre</td>
                                <td>
                                    @if (company.CentrosAcceso?.Any() == true)
                                    {
                                        <div class="centros-list">
                                            @foreach (var centro in company.CentrosAcceso.Take(2))
                                            {
                                                <span class="badge bg-info me-1">@centro.Nombre</span>
                                            }
                                            @if (company.CentrosAcceso.Count > 2)
                                            {
                                                <span class="badge bg-secondary">+@(company.CentrosAcceso.Count - 2) más</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin centros asignados</span>
                                    }
                                </td>
                                <td>
                                    @if (company.IsActive)
                                    {
                                        <span class="badge bg-success">Activo</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Inactivo</span>
                                    }
                                </td>
                                <td>@company.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(company)" title="Editar">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-info" @onclick="() => ShowEmployeesModal(company)" title="Ver Empleados">
                                            <i class="bi bi-people"></i>
                                        </button>
                                        @if (company.IsActive)
                                        {
                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => DeactivateCompany(company.Id)" title="Desactivar">
                                                <i class="bi bi-pause-circle"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-success" @onclick="() => ActivateCompany(company.Id)" title="Activar">
                                                <i class="bi bi-play-circle"></i>
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCompany(company.Id)" title="Eliminar">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<!-- Modal para crear/editar empresa -->
@if (showModal)
{
    <div class="modal-backdrop show" @onclick="HideModal"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Empresa" : "Nueva Empresa")</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentCompany" OnValidSubmit="@HandleSave">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="name">Nombre de la Empresa *</label>
                                    <InputText id="name" @bind-Value="currentCompany.Name" class="form-control" />
                                    <ValidationMessage For="@(() => currentCompany.Name)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="description">Descripción</label>
                                    <InputText id="description" @bind-Value="currentCompany.Description" class="form-control" />
                                    <ValidationMessage For="@(() => currentCompany.Description)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="sitio">Sitio *</label>
                                    <InputSelect id="sitio" @bind-Value="currentCompany.IdSitio" class="form-control" @onchange="OnSitioChanged">
                                        <option value="">Seleccionar sitio...</option>
                                        @foreach (var sitio in availableSites)
                                        {
                                            <option value="@sitio.Id">@sitio.Nombre</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentCompany.IdSitio)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <CentroSelection 
                            IdSitio="currentCompany.IdSitio" 
                            SelectedCentroIds="selectedCentros" 
                            SelectedCentroIdsChanged="OnSelectedCentrosChanged" />

                        @if (isEditing)
                        {
                            <div class="form-group">
                                <div class="form-check">
                                    <InputCheckbox id="isActive" @bind-Value="currentCompany.IsActive" class="form-check-input" />
                                    <label for="isActive" class="form-check-label">Empresa Activa</label>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                @(isEditing ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para ver empleados de la empresa -->
@if (showEmployeesModal)
{
    <div class="modal-backdrop show" @onclick="HideEmployeesModal"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Empleados de @selectedCompany?.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideEmployeesModal"></button>
                </div>
                <div class="modal-body">
                    @if (companyEmployees.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Nombre</th>
                                        <th>Email</th>
                                        <th>Teléfono</th>
                                        <th>Estado</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var employee in companyEmployees)
                                    {
                                        <tr>
                                            <td>@employee.FullName</td>
                                            <td>@employee.Email</td>
                                            <td>@employee.Phone</td>
                                            <td>
                                                @if (employee.IsActive)
                                                {
                                                    <span class="badge bg-success">Activo</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Inactivo</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-3">No hay empleados registrados para esta empresa</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideEmployeesModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

</RoleGuard>

@code {
    private List<CompanyDto> companies = new();
    private List<EmployeeDto> companyEmployees = new();
    private List<SitioDto> availableSites = new();
    private List<int> selectedCentros = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool showEmployeesModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private CompanyModel currentCompany = new();
    private CompanyDto? selectedCompany = null;
    private int editingCompanyId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Cargar datos reales
            companies = await CompanyService.GetAllCompaniesAsync();
            availableSites = await SitioService.GetAllSitiosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error cargando empresas: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        currentCompany = new CompanyModel();
        selectedCentros.Clear();
        isEditing = false;
        showModal = true;
        errorMessage = string.Empty;
    }

    private async Task ShowEditModal(CompanyDto company)
    {
        editingCompanyId = company.Id;
        currentCompany = new CompanyModel
        {
            Name = company.Name,
            Description = company.Description,
            IdSitio = company.IdSitio,
            IsActive = company.IsActive
        };
        
        // Cargar centros del sitio y marcar los seleccionados
        if (company.IdSitio > 0)
        {
            try
            {
                selectedCentros = company.CentrosAcceso?.Select(c => c.Id).ToList() ?? new List<int>();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error cargando centros: {ex.Message}";
                selectedCentros.Clear();
            }
        }
        
        isEditing = true;
        showModal = true;
        errorMessage = string.Empty;
    }

    private void HideModal()
    {
        showModal = false;
        errorMessage = string.Empty;
    }

    private async Task OnSitioChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int sitioId) && sitioId > 0)
        {
            // Limpiar centros seleccionados cuando cambia el sitio
            selectedCentros.Clear();
            StateHasChanged();
        }
    }

    private async Task OnSelectedCentrosChanged(List<int> centroIds)
    {
        selectedCentros = centroIds;
        StateHasChanged();
    }


    private async Task ShowEmployeesModal(CompanyDto company)
    {
        selectedCompany = company;
        // TODO: Implementar llamada al API para obtener empleados
        // companyEmployees = await EmployeeService.GetEmployeesByCompanyAsync(company.Id);
        
        // Datos de prueba
        companyEmployees = new List<EmployeeDto>
        {
            new EmployeeDto { Id = 1, FirstName = "Juan", LastName = "Pérez", Email = "juan.perez@empresaabc.com", Phone = "999-111-222", IsActive = true },
            new EmployeeDto { Id = 2, FirstName = "María", LastName = "González", Email = "maria.gonzalez@empresaabc.com", Phone = "999-333-444", IsActive = true }
        };
        
        showEmployeesModal = true;
    }

    private void HideEmployeesModal()
    {
        showEmployeesModal = false;
        selectedCompany = null;
        companyEmployees.Clear();
    }

    private async Task HandleSave()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;

            if (isEditing)
            {
                var updateDto = new UpdateCompanyDto
                {
                    Id = editingCompanyId,
                    Name = currentCompany.Name,
                    Description = currentCompany.Description,
                    IdSitio = currentCompany.IdSitio,
                    IsActive = currentCompany.IsActive,
                    CentroIds = selectedCentros
                };
                await CompanyService.UpdateCompanyAsync(updateDto);
            }
            else
            {
                var createDto = new CreateCompanyDto
                {
                    Name = currentCompany.Name,
                    Description = currentCompany.Description,
                    IdSitio = currentCompany.IdSitio,
                    CentroIds = selectedCentros
                };
                await CompanyService.CreateCompanyAsync(createDto);
            }

            await LoadData();
            HideModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error guardando empresa: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ActivateCompany(int companyId)
    {
        try
        {
            await CompanyService.ActivateCompanyAsync(companyId);
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error activando empresa: {ex.Message}";
        }
    }

    private async Task DeactivateCompany(int companyId)
    {
        try
        {
            await CompanyService.DeactivateCompanyAsync(companyId);
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error desactivando empresa: {ex.Message}";
        }
    }

    private async Task DeleteCompany(int companyId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que quieres eliminar esta empresa?");
        if (confirmed)
        {
            try
            {
                await CompanyService.DeleteCompanyAsync(companyId);
                await LoadData();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error eliminando empresa: {ex.Message}";
            }
        }
    }

    private async Task TestDebugData()
    {
        try
        {
            var content = await CompanyService.GetDebugDataAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"Debug Data: {content}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }


    public class CompanyModel
    {
        [Required(ErrorMessage = "El nombre de la empresa es requerido")]
        [StringLength(200, ErrorMessage = "El nombre no puede exceder 200 caracteres")]
        public string Name { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "La descripción no puede exceder 500 caracteres")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "El sitio es requerido")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar un sitio")]
        public int IdSitio { get; set; }

        public bool IsActive { get; set; } = true;
    }

    public class EmployeeDto
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string FullName => $"{FirstName} {LastName}".Trim();
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public bool IsActive { get; set; }
    }
}
