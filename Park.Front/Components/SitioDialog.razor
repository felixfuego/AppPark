@using Park.Comun.DTOs
@using Park.Front.Services

<div class="modal fade" id="sitioModal" tabindex="-1" aria-labelledby="sitioModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sitioModalLabel">@(IsEdit ? "Editar Sitio" : "Nuevo Sitio")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="sitioForm">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre del Sitio <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="nombre" @bind="createSitio.Nombre" maxlength="200" required>
                        <div class="form-text">Máximo 200 caracteres</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="descripcion" class="form-label">Descripción</label>
                        <textarea class="form-control" id="descripcion" @bind="createSitio.Descripcion" rows="3" maxlength="500"></textarea>
                        <div class="form-text">Máximo 500 caracteres</div>
                    </div>
                    
                    @if (IsEdit)
                    {
                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="isActive" @bind="updateSitio.IsActive">
                                <label class="form-check-label" for="isActive">
                                    Activo
                                </label>
                            </div>
                        </div>
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="Save" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        @("Guardando...")
                    }
                    else
                    {
                        @(IsEdit ? "Actualizar" : "Crear")
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public object Sitio { get; set; } = null!;
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }

    private bool isSaving = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Asegurar que el modal se inicialice correctamente
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (typeof bootstrap !== 'undefined') {
                    const modalElement = document.getElementById('sitioModal');
                    if (modalElement && !bootstrap.Modal.getInstance(modalElement)) {
                        new bootstrap.Modal(modalElement, {
                            backdrop: true,
                            keyboard: true,
                            focus: true
                        });
                    }
                }
            ");
        }
    }

    private CreateSitioDto createSitio => (CreateSitioDto)Sitio;
    private UpdateSitioDto updateSitio => (UpdateSitioDto)Sitio;

    private async Task Save()
    {
        try
        {
            isSaving = true;
            StateHasChanged();

            if (IsEdit)
            {
                await SitioService.UpdateSitioAsync(updateSitio);
                await ShowAlert("Sitio actualizado exitosamente", "success");
            }
            else
            {
                await SitioService.CreateSitioAsync(createSitio);
                await ShowAlert("Sitio creado exitosamente", "success");
            }

            await OnClose.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            await ShowAlert($"Error al guardar sitio: {ex.Message}", "error");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ShowAlert(string message, string type)
    {
        // Implementar notificaciones con JavaScript
        await JSRuntime.InvokeVoidAsync("showAlert", message, type);
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;
    [Inject] private SitioService SitioService { get; set; } = null!;
}