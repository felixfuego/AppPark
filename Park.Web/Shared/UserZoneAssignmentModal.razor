@using Park.Web.Models
@using Park.Web.Services
@inject IUserService UserService
@inject IZoneService ZoneService
@inject IJSRuntime JSRuntime
@inject ILogger<UserZoneAssignmentModal> Logger

<div class="modal fade @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-map-marker-alt me-2"></i>
                    Gestión de Zonas - @UserFullName
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-2">Cargando información...</p>
                    </div>
                }
                else
                {
                    <div class="row">
                        <!-- Zonas Asignadas -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-check-circle me-2 text-success"></i>
                                        Zonas Asignadas (@assignedZones.Count())
                                    </h6>
                                </div>
                                <div class="card-body">
                                    @if (assignedZones.Any())
                                    {
                                        <div class="list-group list-group-flush">
                                            @foreach (var assignment in assignedZones)
                                            {
                                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@assignment.ZoneName</strong>
                                                        <br />
                                                        <small class="text-muted">
                                                            <i class="fas fa-map-marker-alt me-1"></i>
                                                            Zona asignada
                                                        </small>
                                                    </div>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemoveZoneAssignment(assignment.ZoneId)"
                                                            title="Remover asignación">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted text-center mb-0">
                                            <i class="fas fa-info-circle me-2"></i>
                                            No hay zonas asignadas
                                        </p>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Asignar Nueva Zona -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-plus-circle me-2 text-primary"></i>
                                        Asignar Nueva Zona
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="zoneSelect" class="form-label">Zona *</label>
                                        <select id="zoneSelect" class="form-select" @bind="newAssignment.ZoneId">
                                            <option value="0">Seleccionar zona...</option>
                                            @if (availableZones != null)
                                            {
                                                @foreach (var zone in availableZones)
                                                {
                                                    <option value="@zone.Id">@zone.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>

                                    <div class="d-grid">
                                        <button type="button" class="btn btn-primary" @onclick="AssignZone" disabled="@isSubmitting">
                                            @if (isSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Asignando...</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-plus me-2"></i>
                                                <span>Asignar Zona</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                    <i class="fas fa-times me-2"></i>
                    Cerrar
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public string UserFullName { get; set; } = string.Empty;
    [Parameter] public EventCallback OnClose { get; set; }

    private List<UserZoneAssignment> assignedZones = new();
    private List<Zone> availableZones = new();
    private AssignZoneModel newAssignment = new();
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && UserId > 0)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Cargar zonas asignadas y disponibles en paralelo
            var assignedTask = LoadAssignedZones();
            var availableTask = LoadAvailableZones();
            
            await Task.WhenAll(assignedTask, availableTask);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos para usuario {UserId}", UserId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAssignedZones()
    {
        try
        {
            var zones = await UserService.GetUserZonesAsync(UserId);
            assignedZones = zones.Select(z => new UserZoneAssignment
            {
                ZoneId = z.Id,
                ZoneName = z.Name,
                IsActive = z.IsActive,
                CreatedAt = z.CreatedAt
            }).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar zonas asignadas para usuario {UserId}", UserId);
            assignedZones = new List<UserZoneAssignment>();
        }
    }

    private async Task LoadAvailableZones()
    {
        try
        {
            var allZones = await ZoneService.GetAllAsync();
            var assignedZoneIds = assignedZones.Select(az => az.ZoneId).ToHashSet();
            
            availableZones = allZones?
                .Where(z => !assignedZoneIds.Contains(z.Id) && z.IsActive)
                .ToList() ?? new List<Zone>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar zonas disponibles para usuario {UserId}", UserId);
            availableZones = new List<Zone>();
        }
    }

    private async Task AssignZone()
    {
        if (newAssignment.ZoneId == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Por favor selecciona una zona");
            return;
        }

        try
        {
            isSubmitting = true;
            var success = await UserService.AssignUserToZoneAsync(UserId, newAssignment.ZoneId);
            
            if (success)
            {
                // Recargar datos
                await LoadData();
                
                // Limpiar formulario
                newAssignment = new AssignZoneModel();
                
                // Notificar éxito
                await JSRuntime.InvokeVoidAsync("alert", "Zona asignada correctamente");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al asignar zona");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al asignar zona {ZoneId} al usuario {UserId}", newAssignment.ZoneId, UserId);
            await JSRuntime.InvokeVoidAsync("alert", "Error al asignar zona: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task RemoveZoneAssignment(int zoneId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que quieres remover esta asignación?"))
        {
            return;
        }

        try
        {
            var success = await UserService.RemoveUserFromZoneAsync(UserId, zoneId);
            
            if (success)
            {
                // Recargar datos
                await LoadData();
                
                // Notificar éxito
                await JSRuntime.InvokeVoidAsync("alert", "Asignación removida correctamente");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al remover asignación");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al remover asignación de zona {ZoneId} del usuario {UserId}", zoneId, UserId);
            await JSRuntime.InvokeVoidAsync("alert", "Error al remover asignación: " + ex.Message);
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await OnClose.InvokeAsync();
    }
}
