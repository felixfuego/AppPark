@using Park.Web.Services
@using Park.Web.Models
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILogger<GuardiaNavigationMiddleware> Logger

<div style="display: none;"></div>

@code {
    private bool isGuardia = false;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            isGuardia = currentUser?.Roles.Any(r => r.Name == "Guardia") ?? false;
            
            if (isGuardia)
            {
                var currentUri = Navigation.Uri;
                var isGuardiaPage = currentUri.Contains("/guardia");
                
                // Si es guardia y no está en la página de guardia, redirigir
                if (!isGuardiaPage)
                {
                    Logger.LogInformation("Guardia intentó acceder a {Uri}, redirigiendo a /guardia", currentUri);
                    Navigation.NavigateTo("/guardia");
                }
            }
        }
        
        isInitialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AuthService.IsAuthenticated)
        {
            // Escuchar cambios de navegación
            Navigation.LocationChanged += OnLocationChanged;
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (AuthService.IsAuthenticated)
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            var isCurrentlyGuardia = currentUser?.Roles.Any(r => r.Name == "Guardia") ?? false;
            
            if (isCurrentlyGuardia && !e.Location.Contains("/guardia"))
            {
                Logger.LogInformation("Guardia intentó navegar a {Location}, redirigiendo a /guardia", e.Location);
                Navigation.NavigateTo("/guardia");
            }
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
