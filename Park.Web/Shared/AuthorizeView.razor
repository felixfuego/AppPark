@using Park.Web.Services
@inject IAuthorizationService AuthorizationService
@inject IAuthService AuthService

@* Componente personalizado de autorizaci√≥n basado en roles y empresas *@

@if (IsAuthorized)
{
    @ChildContent
}
else if (NotAuthorized != null)
{
    @NotAuthorized
}
else
{
    <div class="alert alert-warning" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        No tienes permisos para acceder a esta funcionalidad.
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? NotAuthorized { get; set; }
    [Parameter] public string? RequiredPermission { get; set; }
    [Parameter] public int? CompanyId { get; set; }
    [Parameter] public int? VisitId { get; set; }
    [Parameter] public int? GateId { get; set; }

    private bool IsAuthorized { get; set; } = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                IsAuthorized = false;
                return;
            }

            IsAuthorized = RequiredPermission switch
            {
                "ManageUsers" => await AuthorizationService.CanManageUsersAsync(currentUser.Id),
                "ManageCompanies" => await AuthorizationService.CanManageCompaniesAsync(currentUser.Id),
                "ManageVisits" => await AuthorizationService.CanManageVisitsAsync(currentUser.Id, CompanyId),
                "CreateVisits" => CompanyId.HasValue 
                    ? await AuthorizationService.CanCreateVisitsAsync(currentUser.Id, CompanyId.Value)
                    : await AuthorizationService.CanCreateVisitsAsync(currentUser.Id, 0), // Permite acceso si puede crear visitas en general
                "ManageVisit" => VisitId.HasValue && await AuthorizationService.CanManageVisitAsync(currentUser.Id, VisitId.Value),
                "CheckInOutVisit" => VisitId.HasValue && GateId.HasValue && await AuthorizationService.CanCheckInOutVisitAsync(currentUser.Id, VisitId.Value, GateId.Value),
                "ViewVisit" => VisitId.HasValue && await AuthorizationService.CanViewVisitAsync(currentUser.Id, VisitId.Value),
                "AccessCompany" => CompanyId.HasValue && await AuthorizationService.CanAccessCompanyAsync(currentUser.Id, CompanyId.Value),
                "IsAdmin" => await AuthorizationService.IsAdminAsync(currentUser.Id),
                _ => true // Por defecto permite acceso si no se especifica permiso
            };
        }
        catch (Exception ex)
        {
            // Log error
            IsAuthorized = false;
        }
        finally
        {
            isLoading = false;
        }
    }
} 