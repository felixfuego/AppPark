@using Park.Web.Models
@using Park.Web.Services
@inject IUserService UserService
@inject ICompanyService CompanyService
@inject IJSRuntime JSRuntime
@inject ILogger<UserCompanyAssignmentModal> Logger

<div class="modal fade @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-building me-2"></i>
                    Gestión de Empresas - @UserFullName
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-2">Cargando información...</p>
                    </div>
                }
                else
                {
                    <div class="row">
                        <!-- Empresas Asignadas -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-check-circle me-2 text-success"></i>
                                        Empresas Asignadas (@assignedCompanies.Count())
                                    </h6>
                                </div>
                                <div class="card-body">
                                    @if (assignedCompanies.Any())
                                    {
                                        <div class="list-group list-group-flush">
                                            @foreach (var assignment in assignedCompanies)
                                            {
                                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@assignment.CompanyName</strong>
                                                        <br />
                                                        <small class="text-muted">
                                                            <i class="fas fa-building me-1"></i>
                                                            Empresa asignada
                                                        </small>
                                                    </div>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemoveCompanyAssignment(assignment.CompanyId)"
                                                            title="Remover asignación">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted text-center mb-0">
                                            <i class="fas fa-info-circle me-2"></i>
                                            No hay empresas asignadas
                                        </p>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Asignar Nueva Empresa -->
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-plus-circle me-2 text-primary"></i>
                                        Asignar Nueva Empresa
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="companySelect" class="form-label">Empresa *</label>
                                        <select id="companySelect" class="form-select" @bind="newAssignment.CompanyId">
                                            <option value="0">Seleccionar empresa...</option>
                                            @if (availableCompanies != null)
                                            {
                                                @foreach (var company in availableCompanies)
                                                {
                                                    <option value="@company.Id">@company.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>

                                    <div class="d-grid">
                                        <button type="button" class="btn btn-primary" @onclick="AssignCompany" disabled="@isSubmitting">
                                            @if (isSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Asignando...</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-plus me-2"></i>
                                                <span>Asignar Empresa</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                    <i class="fas fa-times me-2"></i>
                    Cerrar
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public string UserFullName { get; set; } = string.Empty;
    [Parameter] public EventCallback OnClose { get; set; }

    private List<UserCompanyAssignment> assignedCompanies = new();
    private List<Company> availableCompanies = new();
    private AssignCompanyModel newAssignment = new();
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && UserId > 0)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Cargar empresas asignadas y disponibles en paralelo
            var assignedTask = LoadAssignedCompanies();
            var availableTask = LoadAvailableCompanies();
            
            await Task.WhenAll(assignedTask, availableTask);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos para usuario {UserId}", UserId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAssignedCompanies()
    {
        try
        {
            var companies = await UserService.GetUserCompaniesAsync(UserId);
            assignedCompanies = companies.Select(c => new UserCompanyAssignment
            {
                CompanyId = c.Id,
                CompanyName = c.Name,
                IsActive = c.IsActive,
                CreatedAt = c.CreatedAt
            }).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar empresas asignadas para usuario {UserId}", UserId);
            assignedCompanies = new List<UserCompanyAssignment>();
        }
    }

    private async Task LoadAvailableCompanies()
    {
        try
        {
            var allCompanies = await CompanyService.GetAllAsync();
            var assignedCompanyIds = assignedCompanies.Select(ac => ac.CompanyId).ToHashSet();
            
            availableCompanies = allCompanies?
                .Where(c => !assignedCompanyIds.Contains(c.Id) && c.IsActive)
                .ToList() ?? new List<Company>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar empresas disponibles para usuario {UserId}", UserId);
            availableCompanies = new List<Company>();
        }
    }

    private async Task AssignCompany()
    {
        if (newAssignment.CompanyId == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Por favor selecciona una empresa");
            return;
        }

        try
        {
            isSubmitting = true;
            var success = await UserService.AssignUserToCompanyAsync(UserId, newAssignment.CompanyId);
            
            if (success)
            {
                // Recargar datos
                await LoadData();
                
                // Limpiar formulario
                newAssignment = new AssignCompanyModel();
                
                // Notificar éxito
                await JSRuntime.InvokeVoidAsync("alert", "Empresa asignada correctamente");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al asignar empresa");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al asignar empresa {CompanyId} al usuario {UserId}", newAssignment.CompanyId, UserId);
            await JSRuntime.InvokeVoidAsync("alert", "Error al asignar empresa: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task RemoveCompanyAssignment(int companyId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que quieres remover esta asignación?"))
        {
            return;
        }

        try
        {
            var success = await UserService.RemoveUserFromCompanyAsync(UserId, companyId);
            
            if (success)
            {
                // Recargar datos
                await LoadData();
                
                // Notificar éxito
                await JSRuntime.InvokeVoidAsync("alert", "Asignación removida correctamente");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al remover asignación");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al remover asignación de empresa {CompanyId} del usuario {UserId}", companyId, UserId);
            await JSRuntime.InvokeVoidAsync("alert", "Error al remover asignación: " + ex.Message);
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await OnClose.InvokeAsync();
    }
} 