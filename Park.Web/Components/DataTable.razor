<div class="card">
    <div class="card-header">
        <div class="row align-items-center">
            <div class="col">
                <h5 class="mb-0">@Title (@TotalItems)</h5>
            </div>
            <div class="col-auto">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" 
                           class="form-control" 
                           placeholder="@SearchPlaceholder" 
                           @bind="SearchTerm" 
                           @bind:event="oninput" />
                </div>
            </div>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        @foreach (var column in Columns)
                        {
                            <th class="@(column.Sortable ? "sortable" : "")" @onclick="() => SortBy(column)">
                                @column.Header
                                @if (column.Sortable)
                                {
                                    <i class="fas fa-sort ms-1"></i>
                                }
                            </th>
                        }
                        @if (ShowActions)
                        {
                            <th>Acciones</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in PaginatedItems)
                    {
                        <tr>
                            @foreach (var column in Columns)
                            {
                                <td>
                                    @if (column.Template != null)
                                    {
                                        @column.Template(item)
                                    }
                                    else
                                    {
                                        @GetPropertyValue(item, column.PropertyName)
                                    }
                                </td>
                            }
                            @if (ShowActions)
                            {
                                <td>
                                    <div class="btn-group" role="group">
                                        @if (OnView.HasDelegate)
                                        {
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => OnView.InvokeAsync(item)"
                                                    title="Ver detalles">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        }
                                        @if (OnEdit.HasDelegate)
                                        {
                                            <button class="btn btn-sm btn-outline-warning" 
                                                    @onclick="() => OnEdit.InvokeAsync(item)"
                                                    title="Editar">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        }
                                        @if (OnDelete.HasDelegate)
                                        {
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="() => OnDelete.InvokeAsync(item)"
                                                    title="Eliminar">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                        @if (CustomActions != null)
                                        {
                                            @CustomActions(item)
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    @if (TotalPages > 1)
    {
        <div class="card-footer">
            <Pagination CurrentPage="CurrentPage"
                       TotalPages="TotalPages"
                       PageSize="PageSize"
                       TotalItems="TotalItems"
                       PageChanged="OnPageChanged" />
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string SearchPlaceholder { get; set; } = "Buscar...";
    [Parameter] public List<DataColumn> Columns { get; set; } = new();
    [Parameter] public List<object> Items { get; set; } = new();
    [Parameter] public int PageSize { get; set; } = 20;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public EventCallback<object> OnView { get; set; }
    [Parameter] public EventCallback<object> OnEdit { get; set; }
    [Parameter] public EventCallback<object> OnDelete { get; set; }
    [Parameter] public RenderFragment<object>? CustomActions { get; set; }

    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private string sortBy = string.Empty;
    private bool sortAscending = true;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            currentPage = 1;
        }
    }

    private int CurrentPage
    {
        get => currentPage;
        set
        {
            currentPage = value;
            StateHasChanged();
        }
    }

    private IEnumerable<object> FilteredItems => Items
        .Where(item => string.IsNullOrEmpty(SearchTerm) || 
                      Columns.Any(col => GetPropertyValue(item, col.PropertyName)?.ToString()?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true))
        .OrderBy(item => GetPropertyValue(item, sortBy));

    private IEnumerable<object> PaginatedItems => FilteredItems
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize);

    private int TotalItems => FilteredItems.Count();
    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        await Task.CompletedTask;
    }

    private void SortBy(DataColumn column)
    {
        if (!column.Sortable) return;

        if (sortBy == column.PropertyName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortBy = column.PropertyName;
            sortAscending = true;
        }
    }

    private object? GetPropertyValue(object item, string propertyName)
    {
        var property = item.GetType().GetProperty(propertyName);
        return property?.GetValue(item);
    }

    public class DataColumn
    {
        public string Header { get; set; } = string.Empty;
        public string PropertyName { get; set; } = string.Empty;
        public bool Sortable { get; set; } = true;
        public RenderFragment<object>? Template { get; set; }
    }
}
