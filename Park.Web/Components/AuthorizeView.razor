@using Park.Web.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Verificando autenticación...</span>
            </div>
            <p class="mt-3">Verificando autenticación...</p>
        </div>
    </div>
}
else if (AuthService.IsAuthenticated)
{
    @ChildContent
}
else
{
    @if (NotAuthorized != null)
    {
        @NotAuthorized
    }
    else
    {
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Redirigiendo...</span>
                </div>
                <p class="mt-3">Redirigiendo al login...</p>
            </div>
        </div>
    }
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? NotAuthorized { get; set; }

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Esperar un momento para que el AuthService se inicialice
        await Task.Delay(100);
        
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
        
        isLoading = false;
    }
}
