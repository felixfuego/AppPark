@inherits LayoutComponentBase
@using Park.Web.Services
@using Park.Web.Models
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<!-- Middleware de navegación para guardias -->
<GuardiaNavigationMiddleware />

@if (AuthService.IsAuthenticated)
{
    <div class="layout-wrapper">
        @if (!isGuardia)
        {
            <!-- Overlay para móviles -->
            @if (isMobile && sidebarOpen)
            {
                <div class="sidebar-overlay" @onclick="CloseSidebar"></div>
            }

            <!-- Sidebar -->
            <div class="sidebar @(sidebarCollapsed ? "collapsed" : "") @(isMobile && sidebarOpen ? "show" : "")">
                <NavMenu />
            </div>
        }

        <!-- Main Content -->
        <div class="main-content @(isGuardia ? "guardia-layout" : "")">
            <!-- Top Navigation Bar -->
            <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom">
                <div class="container-fluid">
                    @if (!isGuardia)
                    {
                        <button class="btn btn-link sidebar-toggle" @onclick="ToggleSidebar">
                            <i class="fas fa-bars"></i>
                        </button>
                    }

                    <div class="navbar-brand ms-3">
                        <h5 class="mb-0 text-primary">
                            <i class="fas fa-industry me-2"></i>
                            Park Industrial
                            @if (isGuardia)
                            {
                                <span class="badge bg-warning text-dark ms-2">Panel de Guardia</span>
                            }
                        </h5>
                    </div>

                    <div class="navbar-nav ms-auto">
                        <div class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user-circle me-2"></i>
                                @if (currentUser != null)
                                {
                                    <span>@currentUser.FullName</span>
                                }
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                @if (!isGuardia)
                                {
                                    <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>Perfil</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Configuración</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                }
                                <li><a class="dropdown-item text-danger" href="#" @onclick="HandleLogout"><i class="fas fa-sign-out-alt me-2"></i>Cerrar Sesión</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Page Content -->
            <div class="content-wrapper">
                @Body
            </div>
        </div>
    </div>
}
else
{
    @Body
}

@code {
    private bool sidebarCollapsed = false;
    private bool sidebarOpen = false;
    private bool isMobile = false;
    private bool isGuardia = false;
    private UserInfo? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        isGuardia = currentUser?.Roles.Any(r => r.Name == "Guardia") ?? false;
        await CheckScreenSize();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addResizeListener", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeVoidAsync("addMobileMenuListener", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnResize(int width)
    {
        isMobile = width <= 768;
        if (!isMobile)
        {
            sidebarOpen = false;
        }
        StateHasChanged();
    }

    [JSInvokable]
    public void OnCloseMobileMenu()
    {
        sidebarOpen = false;
        StateHasChanged();
    }

    private async Task CheckScreenSize()
    {
        var width = await JSRuntime.InvokeAsync<int>("getWindowWidth");
        isMobile = width <= 768;
    }

    private void ToggleSidebar()
    {
        if (isMobile)
        {
            sidebarOpen = !sidebarOpen;
        }
        else
        {
            sidebarCollapsed = !sidebarCollapsed;
        }
    }

    private void CloseSidebar()
    {
        if (isMobile)
        {
            sidebarOpen = false;
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}
