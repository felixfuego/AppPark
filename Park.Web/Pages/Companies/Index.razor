@page "/companies"
@using Park.Web.Models
@using Park.Web.Services
@inject ICompanyService CompanyService
@inject NavigationManager Navigation
@inject ILogger<Index> Logger

<AuthorizeView>
    <ChildContent>
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-building me-2"></i>
                        Gestión de Empresas
                    </h1>
                    <p class="text-muted">Administra las empresas del parque industrial</p>
                </div>
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/companies/create"))">
                    <i class="fas fa-plus me-2"></i>
                    Nueva Empresa
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2">Cargando empresas...</p>
                </div>
            }
            else if (companies == null || !companies.Any())
            {
                <div class="text-center py-5">
                    <i class="fas fa-building fa-3x text-muted mb-3"></i>
                    <h4>No hay empresas registradas</h4>
                    <p class="text-muted">Comienza agregando la primera empresa al parque industrial.</p>
                    <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/companies/create"))">
                        <i class="fas fa-plus me-2"></i>
                        Agregar Empresa
                    </button>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                <h5 class="mb-0">Empresas (@companies.Count())</h5>
                            </div>
                            <div class="col-auto">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="Buscar empresas..." 
                                           @bind="searchTerm" @bind:event="oninput" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Empresa</th>
                                        <th>Zona</th>
                                        <th>Contacto</th>
                                        <th>Estado</th>
                                        <th>Visitas</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var company in filteredCompanies)
                                    {
                                        <tr>
                                            <td>
                                                <div>
                                                    <strong>@company.Name</strong>
                                                    @if (!string.IsNullOrEmpty(company.Description))
                                                    {
                                                        <br />
                                                        <small class="text-muted">@company.Description</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@company.Zone.Name</span>
                                            </td>
                                            <td>
                                                <div>
                                                    <div><i class="fas fa-user me-1"></i>@company.ContactPerson</div>
                                                    <div><i class="fas fa-phone me-1"></i>@company.ContactPhone</div>
                                                    <div><i class="fas fa-envelope me-1"></i>@company.ContactEmail</div>
                                                </div>
                                            </td>
                                            <td>
                                                @if (company.IsActive)
                                                {
                                                    <span class="badge bg-success">Activa</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Inactiva</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@company.VisitsCount</span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="@(() => Navigation.NavigateTo($"/companies/{company.Id}"))"
                                                            title="Ver detalles">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning" 
                                                            @onclick="@(() => Navigation.NavigateTo($"/companies/edit/{company.Id}"))"
                                                            title="Editar">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => DeleteCompany(company)"
                                                            title="Eliminar">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </ChildContent>
    <NotAuthorized>
        <div class="text-center">
            <h3>Acceso Denegado</h3>
            <p>Debes iniciar sesión para acceder a la gestión de empresas.</p>
            <a href="/login" class="btn btn-primary">Iniciar Sesión</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Company>? companies;
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    private IEnumerable<Company> filteredCompanies => companies?
        .Where(c => string.IsNullOrEmpty(searchTerm) || 
                   c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   c.ContactPerson.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderBy(c => c.Name) ?? Enumerable.Empty<Company>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        try
        {
            isLoading = true;
            var result = await CompanyService.GetAllAsync();
            companies = result?.ToList() ?? new List<Company>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar empresas");
            companies = new List<Company>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteCompany(Company company)
    {
        // TODO: Implementar confirmación de eliminación
        try
        {
            var success = await CompanyService.DeleteAsync(company.Id);
            if (success)
            {
                await LoadCompanies();
                // TODO: Mostrar mensaje de éxito
            }
            else
            {
                // TODO: Mostrar mensaje de error
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar empresa {CompanyId}", company.Id);
            // TODO: Mostrar mensaje de error
        }
    }
}
