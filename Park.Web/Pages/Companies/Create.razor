@page "/companies/create"
@using Park.Web.Models
@using Park.Web.Services
@inject ICompanyService CompanyService
@inject IZoneService ZoneService
@inject NavigationManager Navigation
@inject ILogger<Create> Logger

<AuthorizeView>
    <ChildContent>
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-plus me-2"></i>
                        Nueva Empresa
                    </h1>
                    <p class="text-muted">Registra una nueva empresa en el parque industrial</p>
                </div>
                <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/companies"))">
                    <i class="fas fa-arrow-left me-2"></i>
                    Volver
                </button>
            </div>

            <div class="row">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Información de la Empresa</h5>
                        </div>
                        <div class="card-body">
                            <EditForm Model="company" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="name" class="form-label">Nombre de la Empresa *</label>
                                        <InputText id="name" class="form-control" @bind-Value="company.Name" />
                                        <ValidationMessage For="@(() => company.Name)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="zone" class="form-label">Zona *</label>
                                        <InputSelect id="zone" class="form-select" @bind-Value="company.ZoneId">
                                            <option value="">Seleccionar zona...</option>
                                            @if (zones != null)
                                            {
                                                @foreach (var zone in zones)
                                                {
                                                    <option value="@zone.Id">@zone.Name</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => company.ZoneId)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">Descripción</label>
                                    <InputTextArea id="description" class="form-control" rows="3" @bind-Value="company.Description" />
                                    <ValidationMessage For="@(() => company.Description)" />
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="address" class="form-label">Dirección</label>
                                        <InputText id="address" class="form-control" @bind-Value="company.Address" />
                                        <ValidationMessage For="@(() => company.Address)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="phone" class="form-label">Teléfono</label>
                                        <InputText id="phone" class="form-control" @bind-Value="company.Phone" />
                                        <ValidationMessage For="@(() => company.Phone)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="email" class="form-label">Email</label>
                                    <InputText id="email" class="form-control" @bind-Value="company.Email" />
                                    <ValidationMessage For="@(() => company.Email)" />
                                </div>

                                <hr />

                                <h6>Información de Contacto</h6>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="contactPerson" class="form-label">Persona de Contacto</label>
                                        <InputText id="contactPerson" class="form-control" @bind-Value="company.ContactPerson" />
                                        <ValidationMessage For="@(() => company.ContactPerson)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="contactPhone" class="form-label">Teléfono de Contacto</label>
                                        <InputText id="contactPhone" class="form-control" @bind-Value="company.ContactPhone" />
                                        <ValidationMessage For="@(() => company.ContactPhone)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="contactEmail" class="form-label">Email de Contacto</label>
                                    <InputText id="contactEmail" class="form-control" @bind-Value="company.ContactEmail" />
                                    <ValidationMessage For="@(() => company.ContactEmail)" />
                                </div>

                                <div class="d-flex justify-content-end gap-2">
                                    <button type="button" class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/companies"))">
                                        Cancelar
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Guardando...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save me-2"></i>
                                            <span>Guardar Empresa</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Información Adicional</h6>
                        </div>
                        <div class="card-body">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Nota:</strong> Los campos marcados con * son obligatorios.
                            </div>
                            
                            @if (zones != null && zones.Any())
                            {
                                <div class="mb-3">
                                    <h6>Zonas Disponibles</h6>
                                    <div class="list-group list-group-flush">
                                        @foreach (var zone in zones.Take(5))
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@zone.Name</strong>
                                                    <br />
                                                    <small class="text-muted">@zone.Description</small>
                                                </div>
                                                <span class="badge bg-primary rounded-pill">@zone.CompaniesCount empresas</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </ChildContent>
    <NotAuthorized>
        <div class="text-center">
            <h3>Acceso Denegado</h3>
            <p>Debes iniciar sesión para crear empresas.</p>
            <a href="/login" class="btn btn-primary">Iniciar Sesión</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private CreateCompany company = new();
    private List<Zone>? zones;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadZones();
    }

    private async Task LoadZones()
    {
        try
        {
            var result = await ZoneService.GetAllAsync();
            zones = result?.ToList() ?? new List<Zone>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar zonas");
            zones = new List<Zone>();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            var result = await CompanyService.CreateAsync(company);
            
            if (result != null)
            {
                // TODO: Mostrar mensaje de éxito
                Navigation.NavigateTo("/companies");
            }
            else
            {
                // TODO: Mostrar mensaje de error
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al crear empresa");
            // TODO: Mostrar mensaje de error
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
