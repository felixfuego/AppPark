@page "/qr-scanner"
@using Park.Web.Models
@using Park.Web.Services
@inject IVisitService VisitService
@inject NavigationManager Navigation
@inject ILogger<QRScanner> Logger
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="SuperAdmin,Admin,Guardia">
    <ChildContent>
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-qrcode me-2"></i>
                        Escáner QR - Check-in de Visitas
                    </h1>
                    <p class="text-muted">Escanea el código QR de la visita para realizar el check-in</p>
                </div>
                <div class="btn-group">
                    <button class="btn btn-outline-primary" @onclick="ToggleCamera" disabled="@isProcessing">
                        <i class="fas fa-camera me-2"></i>
                        @(isCameraActive ? "Detener Cámara" : "Activar Cámara")
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="SwitchCamera" disabled="@(!isCameraActive || isProcessing)">
                        <i class="fas fa-sync-alt me-2"></i>
                        Cambiar Cámara
                    </button>
                </div>
            </div>

            <div class="row">
                <!-- Área de Escaneo -->
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-camera me-2"></i>
                                Escáner de Código QR
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            <div class="position-relative">
                                <!-- Video de la cámara -->
                                <video id="qr-video" 
                                       class="w-100" 
                                       style="max-height: 500px; object-fit: cover;"
                                       autoplay 
                                       playsinline>
                                </video>
                                
                                <!-- Overlay de escaneo -->
                                <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
                                     style="pointer-events: none;">
                                    <div class="border border-3 border-primary rounded"
                                         style="width: 250px; height: 250px; position: relative;">
                                        <!-- Esquinas del marco -->
                                        <div class="position-absolute top-0 start-0 border-top border-start border-primary"
                                             style="width: 30px; height: 30px;"></div>
                                        <div class="position-absolute top-0 end-0 border-top border-end border-primary"
                                             style="width: 30px; height: 30px;"></div>
                                        <div class="position-absolute bottom-0 start-0 border-bottom border-start border-primary"
                                             style="width: 30px; height: 30px;"></div>
                                        <div class="position-absolute bottom-0 end-0 border-bottom border-end border-primary"
                                             style="width: 30px; height: 30px;"></div>
                                        
                                        <!-- Línea de escaneo animada -->
                                        <div class="position-absolute start-0 w-100 border-top border-primary"
                                             style="height: 2px; animation: scan 2s linear infinite;"
                                             id="scan-line"></div>
                                    </div>
                                </div>

                                <!-- Mensaje de estado -->
                                <div class="position-absolute bottom-0 start-0 w-100 p-3 text-center text-white"
                                     style="background: rgba(0,0,0,0.7);">
                                    <div id="scan-status">
                                        @if (!isCameraActive)
                                        {
                                            <span><i class="fas fa-camera-slash me-2"></i>Cámara inactiva</span>
                                        }
                                        else if (isProcessing)
                                        {
                                            <span><i class="fas fa-spinner fa-spin me-2"></i>Procesando...</span>
                                        }
                                        else
                                        {
                                            <span><i class="fas fa-search me-2"></i>Posiciona el código QR en el marco</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Panel de Información -->
                <div class="col-lg-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                Información de Visita
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (scannedVisit == null)
                            {
                                <div class="text-center py-4">
                                    <i class="fas fa-qrcode fa-3x text-muted mb-3"></i>
                                    <h6>No se ha escaneado ninguna visita</h6>
                                    <p class="text-muted small">
                                        Escanea el código QR de una visita para ver su información y realizar el check-in
                                    </p>
                                </div>
                            }
                            else
                            {
                                <div class="visit-info">
                                    <div class="mb-3">
                                        <h6 class="text-primary">Código de Visita</h6>
                                        <p class="mb-0"><strong>@scannedVisit.VisitCode</strong></p>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="text-primary">Visitante</h6>
                                        <p class="mb-0">
                                            <strong>@scannedVisit.Visitor.FirstName @scannedVisit.Visitor.LastName</strong><br>
                                            <small class="text-muted">
                                                @scannedVisit.Visitor.DocumentType: @scannedVisit.Visitor.DocumentNumber
                                            </small>
                                        </p>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="text-primary">Empresa</h6>
                                        <p class="mb-0">
                                            <strong>@scannedVisit.Company.Name</strong><br>
                                            <small class="text-muted">@scannedVisit.Company.Zone.Name</small>
                                        </p>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="text-primary">Fecha Programada</h6>
                                        <p class="mb-0">
                                            <strong>@scannedVisit.ScheduledDate.ToString("dd/MM/yyyy")</strong><br>
                                            <small class="text-muted">@scannedVisit.ScheduledDate.ToString("HH:mm")</small>
                                        </p>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="text-primary">Estado</h6>
                                        @switch (scannedVisit.Status)
                                        {
                                            case VisitStatus.Pending:
                                                <span class="badge bg-warning">Pendiente</span>
                                                break;
                                            case VisitStatus.InProgress:
                                                <span class="badge bg-primary">En Progreso</span>
                                                break;
                                            case VisitStatus.Completed:
                                                <span class="badge bg-success">Completada</span>
                                                break;
                                            case VisitStatus.Cancelled:
                                                <span class="badge bg-danger">Cancelada</span>
                                                break;
                                        }
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="text-primary">Propósito</h6>
                                        <p class="mb-0">@scannedVisit.Purpose</p>
                                    </div>

                                    @if (!string.IsNullOrEmpty(scannedVisit.Notes))
                                    {
                                        <div class="mb-3">
                                            <h6 class="text-primary">Notas</h6>
                                            <p class="mb-0">@scannedVisit.Notes</p>
                                        </div>
                                    }

                                    <!-- Acciones -->
                                    <div class="d-grid gap-2">
                                        @if (scannedVisit.Status == VisitStatus.Pending)
                                        {
                                            <button class="btn btn-success" @onclick="() => PerformCheckIn(scannedVisit)" disabled="@isProcessing">
                                                <i class="fas fa-sign-in-alt me-2"></i>
                                                Realizar Check-in
                                            </button>
                                        }
                                        else if (scannedVisit.Status == VisitStatus.InProgress)
                                        {
                                            <button class="btn btn-warning" @onclick="() => PerformCheckOut(scannedVisit)" disabled="@isProcessing">
                                                <i class="fas fa-sign-out-alt me-2"></i>
                                                Realizar Check-out
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary" disabled>
                                                <i class="fas fa-info-circle me-2"></i>
                                                Visita @(scannedVisit.Status == VisitStatus.Completed ? "Completada" : "Cancelada")
                                            </button>
                                        }

                                        <button class="btn btn-outline-primary" @onclick="ClearScannedVisit">
                                            <i class="fas fa-times me-2"></i>
                                            Limpiar
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Historial de Escaneos -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-history me-2"></i>
                                Historial Reciente
                            </h6>
                        </div>
                        <div class="card-body p-0">
                            @if (scanHistory.Any())
                            {
                                <div class="list-group list-group-flush">
                                    @foreach (var item in scanHistory.Take(5))
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <small class="text-muted">@item.Timestamp.ToString("HH:mm")</small><br>
                                                <strong>@item.VisitCode</strong>
                                            </div>
                                            <span class="badge bg-@(item.Status == "Success" ? "success" : "danger")">
                                                @item.Status
                                            </span>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-3">
                                    <small class="text-muted">No hay escaneos recientes</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </ChildContent>
    <NotAuthorized>
        <div class="text-center">
            <h3>Acceso Denegado</h3>
            <p>No tienes permisos para acceder al escáner QR.</p>
            <a href="/login" class="btn btn-primary">Iniciar Sesión</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

<style>
    @@keyframes scan {
        0% { top: 0; }
        100% { top: 100%; }
    }
</style>

@code {
    private bool isCameraActive = false;
    private bool isProcessing = false;
    private Visit? scannedVisit = null;
    private List<ScanHistoryItem> scanHistory = new();
    private string currentQRCode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Inicializar el escáner cuando se carga la página
        await InitializeScanner();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeScanner();
        }
    }

    private async Task InitializeScanner()
    {
        try
        {
            // Verificar si el navegador soporta la API de cámara
            var hasCamera = await JSRuntime.InvokeAsync<bool>("checkCameraSupport");
            
            if (!hasCamera)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Tu dispositivo no tiene cámara o no se puede acceder a ella.");
                return;
            }

            // Inicializar el escáner QR
            await JSRuntime.InvokeVoidAsync("initializeQRScanner", "qr-video", DotNetObjectReference.Create(this));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al inicializar el escáner QR");
            await JSRuntime.InvokeVoidAsync("alert", "Error al inicializar el escáner QR: " + ex.Message);
        }
    }

    private async Task ToggleCamera()
    {
        if (isCameraActive)
        {
            await StopCamera();
        }
        else
        {
            await StartCamera();
        }
    }

    private async Task StartCamera()
    {
        try
        {
            isProcessing = true;
            StateHasChanged();

            await JSRuntime.InvokeVoidAsync("startCamera");
            isCameraActive = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al iniciar la cámara");
            await JSRuntime.InvokeVoidAsync("alert", "Error al iniciar la cámara: " + ex.Message);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task StopCamera()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("stopCamera");
            isCameraActive = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al detener la cámara");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SwitchCamera()
    {
        try
        {
            isProcessing = true;
            StateHasChanged();

            await JSRuntime.InvokeVoidAsync("switchCamera");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cambiar de cámara");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cambiar de cámara: " + ex.Message);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnQRCodeDetected(string qrCodeData)
    {
        try
        {
            if (isProcessing || qrCodeData == currentQRCode) return;

            isProcessing = true;
            currentQRCode = qrCodeData;
            StateHasChanged();

            // Reproducir sonido de confirmación
            await JSRuntime.InvokeVoidAsync("playBeepSound");

            // Obtener información de la visita
            var visit = await VisitService.GetByQRCodeAsync(qrCodeData);
            
            if (visit != null)
            {
                scannedVisit = visit;
                
                // Agregar al historial
                scanHistory.Insert(0, new ScanHistoryItem
                {
                    VisitCode = visit.VisitCode,
                    Timestamp = DateTime.Now,
                    Status = "Success"
                });

                await JSRuntime.InvokeVoidAsync("alert", 
                    $"✅ Visita detectada!\n\n" +
                    $"Código: {visit.VisitCode}\n" +
                    $"Visitante: {visit.Visitor.FirstName} {visit.Visitor.LastName}\n" +
                    $"Empresa: {visit.Company.Name}");
            }
            else
            {
                // Agregar al historial como error
                scanHistory.Insert(0, new ScanHistoryItem
                {
                    VisitCode = "QR Inválido",
                    Timestamp = DateTime.Now,
                    Status = "Error"
                });

                await JSRuntime.InvokeVoidAsync("alert", 
                    "❌ Código QR no válido o visita no encontrada.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al procesar código QR");
            await JSRuntime.InvokeVoidAsync("alert", "Error al procesar el código QR: " + ex.Message);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task PerformCheckIn(Visit visit)
    {
        try
        {
            isProcessing = true;
            StateHasChanged();

            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"¿Confirmar Check-in de la visita {visit.VisitCode}?\n\n" +
                $"Visitante: {visit.Visitor.FirstName} {visit.Visitor.LastName}\n" +
                $"Empresa: {visit.Company.Name}");

            if (!confirmed) return;

            var checkIn = new VisitCheckIn
            {
                VisitCode = visit.VisitCode,
                QRCode = currentQRCode
            };

            var result = await VisitService.CheckInAsync(checkIn);
            
            if (result != null)
            {
                scannedVisit = result;
                await JSRuntime.InvokeVoidAsync("alert", 
                    $"✅ Check-in realizado exitosamente!\n\n" +
                    $"Código: {visit.VisitCode}\n" +
                    $"Visitante: {visit.Visitor.FirstName} {visit.Visitor.LastName}\n" +
                    $"Hora: {DateTime.Now:HH:mm}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", 
                    "❌ Error al realizar el Check-in. Verifica que la visita esté programada para hoy.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al realizar check-in");
            await JSRuntime.InvokeVoidAsync("alert", "Error al realizar el Check-in: " + ex.Message);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task PerformCheckOut(Visit visit)
    {
        try
        {
            isProcessing = true;
            StateHasChanged();

            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"¿Confirmar Check-out de la visita {visit.VisitCode}?\n\n" +
                $"Visitante: {visit.Visitor.FirstName} {visit.Visitor.LastName}\n" +
                $"Empresa: {visit.Company.Name}");

            if (!confirmed) return;

            var checkOut = new VisitCheckOut
            {
                VisitCode = visit.VisitCode,
                Notes = "Check-out realizado mediante escáner QR"
            };

            var result = await VisitService.CheckOutAsync(checkOut);
            
            if (result != null)
            {
                scannedVisit = result;
                await JSRuntime.InvokeVoidAsync("alert", 
                    $"✅ Check-out realizado exitosamente!\n\n" +
                    $"Código: {visit.VisitCode}\n" +
                    $"Visitante: {visit.Visitor.FirstName} {visit.Visitor.LastName}\n" +
                    $"Hora: {DateTime.Now:HH:mm}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", 
                    "❌ Error al realizar el Check-out.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al realizar check-out");
            await JSRuntime.InvokeVoidAsync("alert", "Error al realizar el Check-out: " + ex.Message);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ClearScannedVisit()
    {
        scannedVisit = null;
        currentQRCode = string.Empty;
        StateHasChanged();
    }

    public class ScanHistoryItem
    {
        public string VisitCode { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
        public string Status { get; set; } = string.Empty; // Success, Error
    }
}
