@page "/visitors"
@using Park.Web.Models
@using Park.Web.Services
@inject IVisitorService VisitorService
@inject NavigationManager Navigation
@inject ILogger<Index> Logger

<AuthorizeView>
    <ChildContent>
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-users me-2"></i>
                        Gesti贸n de Visitantes
                    </h1>
                    <p class="text-muted">Administra los visitantes del parque industrial</p>
                </div>
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/visitors/create"))">
                    <i class="fas fa-plus me-2"></i>
                    Nuevo Visitante
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2">Cargando visitantes...</p>
                </div>
            }
            else if (visitors == null || !visitors.Any())
            {
                <div class="text-center py-5">
                    <i class="fas fa-users fa-3x text-muted mb-3"></i>
                    <h4>No hay visitantes registrados</h4>
                    <p class="text-muted">Comienza agregando el primer visitante al parque industrial.</p>
                    <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/visitors/create"))">
                        <i class="fas fa-plus me-2"></i>
                        Agregar Visitante
                    </button>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                <h5 class="mb-0">Visitantes (@visitors.Count())</h5>
                            </div>
                            <div class="col-auto">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="Buscar visitantes..." 
                                           @bind="searchTerm" @bind:event="oninput" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Visitante</th>
                                        <th>Documento</th>
                                        <th>Contacto</th>
                                        <th>Empresa</th>
                                        <th>Visitas</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var visitor in filteredVisitors)
                                    {
                                        <tr>
                                            <td>
                                                <div>
                                                    <strong>@visitor.FirstName @visitor.LastName</strong>
                                                    @if (!string.IsNullOrEmpty(visitor.Company))
                                                    {
                                                        <br />
                                                        <small class="text-muted">@visitor.Company</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <div><strong>@visitor.DocumentType:</strong> @visitor.DocumentNumber</div>
                                                    @if (!string.IsNullOrEmpty(visitor.Nationality))
                                                    {
                                                        <small class="text-muted">@visitor.Nationality</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    @if (!string.IsNullOrEmpty(visitor.Phone))
                                                    {
                                                        <div><i class="fas fa-phone me-1"></i>@visitor.Phone</div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(visitor.Email))
                                                    {
                                                        <div><i class="fas fa-envelope me-1"></i>@visitor.Email</div>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(visitor.Company))
                                                {
                                                    <span class="badge bg-info">@visitor.Company</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No especificada</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@visitor.VisitsCount</span>
                                            </td>
                                            <td>
                                                @if (visitor.IsActive)
                                                {
                                                    <span class="badge bg-success">Activo</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Inactivo</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="@(() => Navigation.NavigateTo($"/visitors/{visitor.Id}"))"
                                                            title="Ver detalles">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning" 
                                                            @onclick="@(() => Navigation.NavigateTo($"/visitors/{visitor.Id}/edit"))"
                                                            title="Editar">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => DeleteVisitor(visitor)"
                                                            title="Eliminar">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </ChildContent>
    <NotAuthorized>
        <div class="text-center">
            <h3>Acceso Denegado</h3>
            <p>Debes iniciar sesi贸n para acceder a la gesti贸n de visitantes.</p>
            <a href="/login" class="btn btn-primary">Iniciar Sesi贸n</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Visitor>? visitors;
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    private IEnumerable<Visitor> filteredVisitors => visitors?
        .Where(v => string.IsNullOrEmpty(searchTerm) || 
                   v.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.DocumentNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.Company.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderBy(v => v.FirstName).ThenBy(v => v.LastName) ?? Enumerable.Empty<Visitor>();

    protected override async Task OnInitializedAsync()
    {
        await LoadVisitors();
    }

    private async Task LoadVisitors()
    {
        try
        {
            isLoading = true;
            var result = await VisitorService.GetAllAsync();
            visitors = result?.ToList() ?? new List<Visitor>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar visitantes");
            visitors = new List<Visitor>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteVisitor(Visitor visitor)
    {
        // TODO: Implementar confirmaci贸n de eliminaci贸n
        try
        {
            var success = await VisitorService.DeleteAsync(visitor.Id);
            if (success)
            {
                await LoadVisitors();
                // TODO: Mostrar mensaje de 茅xito
            }
            else
            {
                // TODO: Mostrar mensaje de error
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar visitante {VisitorId}", visitor.Id);
            // TODO: Mostrar mensaje de error
        }
    }
}
