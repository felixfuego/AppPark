@page "/guardia"
@using Park.Web.Models
@using Park.Web.Services
@using Park.Web.Shared
@inject IVisitService VisitService
@inject IAuthorizationService AuthorizationService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<GuardiaView> Logger

<PageTitle>Panel de Guardia</PageTitle>

<div class="container-fluid p-0">
    <!-- Header móvil -->
    <div class="bg-primary text-white p-3 mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">
                    <i class="fas fa-shield-alt me-2"></i>
                    Panel de Guardia
                </h4>
                <small>Bienvenido, @currentUser?.FullName</small>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-light btn-sm" @onclick="ShowQRScanner" title="Escanear QR">
                    <i class="fas fa-qrcode"></i>
                </button>
                <button class="btn btn-outline-light btn-sm" @onclick="RefreshData" title="Actualizar">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Filtros móviles -->
    <div class="px-3 mb-3">
        <div class="row g-2">
            <div class="col-8">
                <div class="input-group">
                    <span class="input-group-text bg-light">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="Buscar visitante..." 
                           @bind="searchTerm" @bind:event="oninput" />
                </div>
            </div>
            <div class="col-4">
                <select class="form-select" @bind="statusFilter">
                    <option value="">Todos</option>
                    <option value="Pending">Pendientes</option>
                    <option value="InProgress">En Progreso</option>
                    <option value="Completed">Completadas</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Estadísticas rápidas -->
    <div class="px-3 mb-3">
        <div class="row g-2">
            <div class="col-4">
                <div class="card bg-warning text-white text-center">
                    <div class="card-body p-2">
                        <div class="h5 mb-0">@pendingVisits</div>
                        <small>Pendientes</small>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="card bg-info text-white text-center">
                    <div class="card-body p-2">
                        <div class="h5 mb-0">@inProgressVisits</div>
                        <small>En Progreso</small>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="card bg-success text-white text-center">
                    <div class="card-body p-2">
                        <div class="h5 mb-0">@completedVisits</div>
                        <small>Completadas</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notificaciones -->
    @if (!string.IsNullOrEmpty(notificationMessage))
    {
        <div class="alert alert-@notificationType alert-dismissible fade show mx-3 mb-3" role="alert">
            <i class="fas fa-@(notificationType == "success" ? "check-circle" : "exclamation-triangle") me-2"></i>
            @notificationMessage
            <button type="button" class="btn-close" @onclick="ClearNotification"></button>
        </div>
    }

    <!-- Lista de visitas -->
    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando visitas...</p>
        </div>
    }
    else if (filteredVisits.Any())
    {
        <div class="px-3">
            @foreach (var visit in filteredVisits)
            {
                <div class="card mb-3 visit-card" @onclick="@(() => ShowVisitDetails(visit))">
                    <div class="card-body p-3">
                        <div class="row align-items-center">
                            <div class="col-8">
                                <div class="d-flex align-items-center mb-2">
                                    <div class="status-indicator @GetStatusClass(visit.Status) me-2"></div>
                                    <h6 class="mb-0">@visit.Visitor.FullName</h6>
                                </div>
                                <div class="text-muted small">
                                    <div><i class="fas fa-building me-1"></i>@visit.Company.Name</div>
                                    <div><i class="fas fa-calendar me-1"></i>@visit.ScheduledDate.ToString("dd/MM HH:mm")</div>
                                    <div><i class="fas fa-door-open me-1"></i>@visit.Gate.Name</div>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                @if (visit.Status == VisitStatus.Pending)
                                {
                                    <button class="btn btn-success btn-lg w-100" 
                                            @onclick:stopPropagation="true" @onclick="@(() => ShowCheckInConfirmation(visit))"
                                            title="Check-in">
                                        <i class="fas fa-sign-in-alt"></i>
                                        <div class="small">Check-in</div>
                                    </button>
                                }
                                else if (visit.Status == VisitStatus.InProgress)
                                {
                                    <button class="btn btn-danger btn-lg w-100" 
                                            @onclick:stopPropagation="true" @onclick="@(() => ShowCheckOutConfirmation(visit))"
                                            title="Check-out">
                                        <i class="fas fa-sign-out-alt"></i>
                                        <div class="small">Check-out</div>
                                    </button>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">@GetStatusText(visit.Status)</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No hay visitas</h5>
            <p class="text-muted">No se encontraron visitas con los filtros aplicados.</p>
        </div>
    }
</div>

<!-- Modal de detalles de visita -->
@if (selectedVisit != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-user me-2"></i>
                        Detalles de Visita
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseVisitDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <strong>Visitante:</strong>
                                <div class="h6">@selectedVisit.Visitor.FullName</div>
                                <small class="text-muted">@selectedVisit.Visitor.Email</small>
                            </div>
                            <div class="mb-3">
                                <strong>Empresa:</strong>
                                <div>@selectedVisit.Company.Name</div>
                            </div>
                            <div class="mb-3">
                                <strong>Propósito:</strong>
                                <div>@selectedVisit.Purpose</div>
                            </div>
                            <div class="mb-3">
                                <strong>Horario:</strong>
                                <div>@selectedVisit.ScheduledDate.ToString("dd/MM/yyyy HH:mm") - @selectedVisit.ScheduledEndTime.ToString("HH:mm")</div>
                            </div>
                            <div class="mb-3">
                                <strong>Puerta:</strong>
                                <div>@selectedVisit.Gate.Name</div>
                            </div>
                            <div class="mb-3">
                                <strong>Estado:</strong>
                                <span class="badge @GetStatusBadgeClass(selectedVisit.Status)">
                                    @GetStatusText(selectedVisit.Status)
                                </span>
                            </div>
                            @if (!string.IsNullOrEmpty(selectedVisit.QRCode))
                            {
                                <div class="mb-3">
                                    <strong>Código QR:</strong>
                                    <div class="text-monospace">@selectedVisit.QRCode</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (selectedVisit.Status == VisitStatus.Pending)
                    {
                        <button type="button" class="btn btn-success btn-lg flex-fill" @onclick="@(() => ShowCheckInConfirmation(selectedVisit))">
                            <i class="fas fa-sign-in-alt me-2"></i>
                            Check-in
                        </button>
                    }
                    else if (selectedVisit.Status == VisitStatus.InProgress)
                    {
                        <button type="button" class="btn btn-danger btn-lg flex-fill" @onclick="@(() => ShowCheckOutConfirmation(selectedVisit))">
                            <i class="fas fa-sign-out-alt me-2"></i>
                            Check-out
                        </button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="CloseVisitDetails">
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal de confirmación de Check-in -->
@if (showCheckInConfirmation && selectedVisit != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        Confirmar Check-in
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseCheckInConfirmation"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-3">
                        <i class="fas fa-question-circle fa-3x text-warning mb-3"></i>
                        <h5>¿Confirmar entrada del visitante?</h5>
                    </div>
                    <div class="alert alert-info">
                        <strong>Visitante:</strong> @selectedVisit.Visitor.FullName<br>
                        <strong>Empresa:</strong> @selectedVisit.Company.Name<br>
                        <strong>Código de Visita:</strong> @selectedVisit.VisitCode
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Importante:</strong> Esta acción no se puede deshacer.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCheckInConfirmation">
                        <i class="fas fa-times me-2"></i>
                        Cancelar
                    </button>
                    <button type="button" class="btn btn-success btn-lg" @onclick="@(() => ConfirmCheckIn(selectedVisit))">
                        <i class="fas fa-check me-2"></i>
                        Confirmar Check-in
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal de confirmación de Check-out -->
@if (showCheckOutConfirmation && selectedVisit != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-sign-out-alt me-2"></i>
                        Confirmar Check-out
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseCheckOutConfirmation"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-3">
                        <i class="fas fa-question-circle fa-3x text-warning mb-3"></i>
                        <h5>¿Confirmar salida del visitante?</h5>
                    </div>
                    <div class="alert alert-info">
                        <strong>Visitante:</strong> @selectedVisit.Visitor.FullName<br>
                        <strong>Empresa:</strong> @selectedVisit.Company.Name<br>
                        <strong>Código de Visita:</strong> @selectedVisit.VisitCode
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Importante:</strong> Esta acción no se puede deshacer.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCheckOutConfirmation">
                        <i class="fas fa-times me-2"></i>
                        Cancelar
                    </button>
                    <button type="button" class="btn btn-danger btn-lg" @onclick="@(() => ConfirmCheckOut(selectedVisit))">
                        <i class="fas fa-check me-2"></i>
                        Confirmar Check-out
                    </button>
                </div>
            </div>
                 </div>
     </div>
 }

 <!-- Modal del Escáner QR -->
 @if (showQRScanner)
 {
     <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.8);" tabindex="-1">
         <div class="modal-dialog modal-dialog-centered modal-lg">
             <div class="modal-content">
                 <div class="modal-header bg-primary text-white">
                     <h5 class="modal-title">
                         <i class="fas fa-qrcode me-2"></i>
                         Escáner QR
                     </h5>
                     <button type="button" class="btn-close btn-close-white" @onclick="CloseQRScanner"></button>
                 </div>
                 <div class="modal-body text-center">
                     <div class="alert alert-info">
                         <i class="fas fa-info-circle me-2"></i>
                         <strong>Instrucciones:</strong> Apunta la cámara hacia el código QR de la visita para escanearlo.
                     </div>
                     
                     <div class="position-relative">
                         <video id="qrVideo" class="w-100" style="max-width: 400px; height: 300px; background-color: #000;"></video>
                         <div class="position-absolute top-50 start-50 translate-middle">
                             <div class="border border-3 border-success" style="width: 200px; height: 200px; pointer-events: none;"></div>
                         </div>
                     </div>
                     
                     @if (isScanning)
                     {
                         <div class="mt-3">
                             <div class="spinner-border text-primary" role="status">
                                 <span class="visually-hidden">Escaneando...</span>
                             </div>
                             <p class="mt-2 text-muted">Escaneando código QR...</p>
                         </div>
                     }
                 </div>
                 <div class="modal-footer">
                     <button type="button" class="btn btn-secondary" @onclick="CloseQRScanner">
                         <i class="fas fa-times me-2"></i>
                         Cancelar
                     </button>
                 </div>
             </div>
         </div>
     </div>
 }

 <style>
    .visit-card {
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        border: 1px solid #dee2e6;
    }

    .visit-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
    }

    .status-pending { background-color: #ffc107; }
    .status-inprogress { background-color: #17a2b8; }
    .status-completed { background-color: #28a745; }
    .status-cancelled { background-color: #dc3545; }

    .btn-lg {
        min-height: 60px;
        font-size: 1rem;
    }

    @@media (max-width: 768px) {
        .container-fluid {
            padding: 0;
        }
        
        .card-body {
            padding: 1rem;
        }
        
        .btn-lg {
            min-height: 50px;
            font-size: 0.9rem;
        }
    }
</style>

@code {
    private UserInfo? currentUser;
    private List<Visit> allVisits = new();
    private Visit? selectedVisit;
    private bool loading = true;
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;
    private bool showCheckInConfirmation = false;
    private bool showCheckOutConfirmation = false;
    
    // Variables para notificaciones
    private string notificationMessage = string.Empty;
    private string notificationType = "success";
    
    // Variables para escáner QR
    private bool showQRScanner = false;
    private bool isScanning = false;

    private IEnumerable<Visit> filteredVisits => allVisits
        .Where(v => string.IsNullOrEmpty(searchTerm) || 
                   v.Visitor.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.Company.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.VisitCode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(v => string.IsNullOrEmpty(statusFilter) || v.Status.ToString() == statusFilter)
        .OrderByDescending(v => v.ScheduledDate);

    private int pendingVisits => allVisits.Count(v => v.Status == VisitStatus.Pending);
    private int inProgressVisits => allVisits.Count(v => v.Status == VisitStatus.InProgress);
    private int completedVisits => allVisits.Count(v => v.Status == VisitStatus.Completed);

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;
            
            if (currentUser == null) return;

            // Los guardias ven todas las visitas
            allVisits = (await VisitService.GetAllAsync())?.ToList() ?? new List<Visit>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos de visitas para guardia");
            allVisits = new List<Visit>();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void ShowVisitDetails(Visit visit)
    {
        selectedVisit = visit;
    }

    private void CloseVisitDetails()
    {
        selectedVisit = null;
        showCheckInConfirmation = false;
        showCheckOutConfirmation = false;
    }

    private void ShowCheckInConfirmation(Visit visit)
    {
        selectedVisit = visit;
        showCheckInConfirmation = true;
    }

    private void ShowCheckOutConfirmation(Visit visit)
    {
        selectedVisit = visit;
        showCheckOutConfirmation = true;
    }

    private void CloseCheckInConfirmation()
    {
        showCheckInConfirmation = false;
    }

    private void CloseCheckOutConfirmation()
    {
        showCheckOutConfirmation = false;
    }

    private void ClearNotification()
    {
        notificationMessage = string.Empty;
    }

    private void ShowNotification(string message, string type = "success")
    {
        notificationMessage = message;
        notificationType = type;
        StateHasChanged();
    }

    // QR Scanner methods
    private void ShowQRScanner()
    {
        showQRScanner = true;
        isScanning = true;
        StateHasChanged();
    }

    private void CloseQRScanner()
    {
        showQRScanner = false;
        isScanning = false;
        JSRuntime.InvokeVoidAsync("cleanupQRScanner");
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnQRCodeScanned(string qrCodeData)
    {
        try
        {
            isScanning = false;
            StateHasChanged();

            // Obtener información de la visita
            var visit = await VisitService.GetByQRCodeAsync(qrCodeData);
            
            if (visit != null)
            {
                // Cerrar escáner y mostrar detalles de la visita
                CloseQRScanner();
                ShowVisitDetails(visit);
                
                ShowNotification($"✅ Visita encontrada: {visit.Visitor.FirstName} {visit.Visitor.LastName}", "success");
            }
            else
            {
                ShowNotification("❌ Código QR no válido o visita no encontrada.", "danger");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al procesar código QR");
            ShowNotification($"❌ Error al procesar el código QR: {ex.Message}", "danger");
        }
    }

    private async Task ConfirmCheckIn(Visit visit)
    {
        showCheckInConfirmation = false;
        await CheckInVisit(visit);
    }

    private async Task ConfirmCheckOut(Visit visit)
    {
        showCheckOutConfirmation = false;
        await CheckOutVisit(visit);
    }

    private async Task CheckInVisit(Visit visit)
    {
        try
        {
            var checkIn = new VisitCheckIn
            {
                VisitCode = visit.VisitCode,
                QRCode = visit.QRCode
            };

            var result = await VisitService.CheckInAsync(checkIn);
            if (result != null)
            {
                ShowNotification($"✅ Check-in realizado correctamente para {visit.Visitor.FullName}", "success");
                await LoadData();
                CloseVisitDetails();
            }
            else
            {
                ShowNotification("❌ Error al realizar check-in. Por favor, inténtalo de nuevo.", "danger");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al realizar check-in de visita {VisitId}", visit.Id);
            ShowNotification($"❌ Error al realizar check-in: {ex.Message}", "danger");
        }
    }

    private async Task CheckOutVisit(Visit visit)
    {
        try
        {
            var checkOut = new VisitCheckOut
            {
                VisitCode = visit.VisitCode,
                Notes = "Check-out realizado por guardia"
            };

            var result = await VisitService.CheckOutAsync(checkOut);
            if (result != null)
            {
                ShowNotification($"✅ Check-out realizado correctamente para {visit.Visitor.FullName}", "success");
                await LoadData();
                CloseVisitDetails();
            }
            else
            {
                ShowNotification("❌ Error al realizar check-out. Por favor, inténtalo de nuevo.", "danger");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al realizar check-out de visita {VisitId}", visit.Id);
            ShowNotification($"❌ Error al realizar check-out: {ex.Message}", "danger");
        }
    }

    private string GetStatusClass(VisitStatus status) => status switch
    {
        VisitStatus.Pending => "status-pending",
        VisitStatus.InProgress => "status-inprogress",
        VisitStatus.Completed => "status-completed",
        VisitStatus.Cancelled => "status-cancelled",
        _ => "status-pending"
    };

    private string GetStatusBadgeClass(VisitStatus status) => status switch
    {
        VisitStatus.Pending => "bg-warning",
        VisitStatus.InProgress => "bg-info",
        VisitStatus.Completed => "bg-success",
        VisitStatus.Cancelled => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetStatusText(VisitStatus status) => status switch
    {
        VisitStatus.Pending => "Pendiente",
        VisitStatus.InProgress => "En Progreso",
        VisitStatus.Completed => "Completada",
        VisitStatus.Cancelled => "Cancelada",
        _ => status.ToString()
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showQRScanner && isScanning)
        {
            // Inicializar el escáner QR
            await JSRuntime.InvokeVoidAsync("initializeQRScanner", DotNetObjectReference.Create(this));
        }
    }
}
