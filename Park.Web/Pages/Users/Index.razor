@page "/usuarios"
@using Park.Web.Services
@using Park.Comun.DTOs
@using Park.Web.Components
@inject IUserService UserService
@inject IRoleService RoleService
@inject ICompanyService CompanyService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Gestión de Usuarios</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        Gestión de Usuarios
                    </h5>
                    <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/usuarios/crear"))">
                        <i class="fas fa-plus me-2"></i>
                        Nuevo Usuario
                    </button>
                </div>
                <div class="card-body">
                    <!-- Filtros -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Buscar usuarios..." 
                                       @bind="searchTerm" @bind:event="oninput" @onkeyup="OnSearch" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedRole">
                                <option value="">Todos los roles</option>
                                @foreach (var role in roles)
                                {
                                    <option value="@role.Name">@role.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedCompany">
                                <option value="">Todas las empresas</option>
                                @foreach (var company in companies)
                                {
                                    <option value="@company.Id">@company.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <select class="form-select" @bind="statusFilter">
                                <option value="">Todos</option>
                                <option value="true">Activos</option>
                                <option value="false">Inactivos</option>
                            </select>
                        </div>
                    </div>

                    <!-- Tabla de Usuarios -->
                    @if (loading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (filteredUsers.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Usuario</th>
                                        <th>Nombre Completo</th>
                                        <th>Email</th>
                                        <th>Roles</th>
                                        <th>Empresas</th>
                                        <th>Estado</th>
                                        <th>Último Login</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in paginatedUsers)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@user.Username</strong>
                                            </td>
                                            <td>@user.FullName</td>
                                            <td>@user.Email</td>
                                            <td>
                                                @foreach (var role in user.Roles)
                                                {
                                                    <span class="badge bg-primary me-1">@role.Name</span>
                                                }
                                            </td>
                                                                                         <td>
                                                 <span class="text-muted">No disponible</span>
                                             </td>
                                            <td>
                                                @if (user.IsActive)
                                                {
                                                    <span class="badge bg-success">Activo</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Inactivo</span>
                                                }
                                                @if (user.IsLocked)
                                                {
                                                    <span class="badge bg-warning">Bloqueado</span>
                                                }
                                            </td>
                                            <td>
                                                @if (user.LastLogin.HasValue)
                                                {
                                                    @user.LastLogin.Value.ToString("dd/MM/yyyy HH:mm")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Nunca</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => ViewUser(user.Id)" title="Ver detalles">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning" 
                                                            @onclick="() => EditUser(user.Id)" title="Editar">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    @if (user.IsActive)
                                                    {
                                                        <button class="btn btn-sm btn-outline-danger" 
                                                                @onclick="() => DeactivateUser(user.Id)" title="Desactivar">
                                                            <i class="fas fa-user-times"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" 
                                                                @onclick="() => ActivateUser(user.Id)" title="Activar">
                                                            <i class="fas fa-user-check"></i>
                                                        </button>
                                                    }
                                                    @if (user.IsLocked)
                                                    {
                                                        <button class="btn btn-sm btn-outline-info" 
                                                                @onclick="() => UnlockUser(user.Id)" title="Desbloquear">
                                                            <i class="fas fa-unlock"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-sm btn-outline-warning" 
                                                                @onclick="() => LockUser(user.Id)" title="Bloquear">
                                                            <i class="fas fa-lock"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Paginación -->
                        <Pagination CurrentPage="@currentPage" 
                                   TotalPages="@totalPages" 
                                   PageChanged="OnPageChanged" />
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No se encontraron usuarios</h5>
                            <p class="text-muted">No hay usuarios que coincidan con los criterios de búsqueda.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<UserDto> users = new();
    private List<UserDto> filteredUsers = new();
    private List<UserDto> paginatedUsers = new();
    private List<RoleDto> roles = new();
    private List<Company> companies = new();
    
    private string searchTerm = "";
    private string selectedRole = "";
    private int selectedCompany = 0;
    private string statusFilter = "";
    
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            var usersTask = UserService.GetAllUsersAsync();
            var rolesTask = RoleService.GetAllRolesAsync();
            var companiesTask = CompanyService.GetAllAsync();

            await Task.WhenAll(usersTask, rolesTask, companiesTask);

            var usersResult = await usersTask;
            var rolesResult = await rolesTask;
            var companiesResult = await companiesTask;
            
            users = usersResult?.ToList() ?? new List<UserDto>();
            roles = rolesResult?.ToList() ?? new List<RoleDto>();
            companies = companiesResult?.ToList() ?? new List<Company>();
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading users:", ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = users.AsEnumerable();

        // Filtro por búsqueda
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(u =>
                u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Filtro por rol
        if (!string.IsNullOrEmpty(selectedRole))
        {
            filtered = filtered.Where(u =>
                u.Roles.Any(r => r.Name == selectedRole));
        }

        // Filtro por empresa - temporalmente deshabilitado
        // if (selectedCompany > 0)
        // {
        //     filtered = filtered.Where(u =>
        //         u.AssignedCompanies.Any(c => c.Id == selectedCompany));
        // }

        // Filtro por estado
        if (!string.IsNullOrEmpty(statusFilter))
        {
            bool isActive = statusFilter == "true";
            filtered = filtered.Where(u => u.IsActive == isActive);
        }

        filteredUsers = filtered.ToList();
        CalculatePagination();
    }

    private void CalculatePagination()
    {
        totalPages = (int)Math.Ceiling((double)filteredUsers.Count / pageSize);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
        
        var skip = (currentPage - 1) * pageSize;
        paginatedUsers = filteredUsers.Skip(skip).Take(pageSize).ToList();
    }

    private void OnSearch()
    {
        currentPage = 1;
        ApplyFilters();
        StateHasChanged();
    }

    private void OnPageChanged(int page)
    {
        currentPage = page;
        CalculatePagination();
        StateHasChanged();
    }

    private void ViewUser(int userId)
    {
        Navigation.NavigateTo($"/usuarios/{userId}");
    }

    private void EditUser(int userId)
    {
        Navigation.NavigateTo($"/usuarios/{userId}/editar");
    }

    private async Task ActivateUser(int userId)
    {
        try
        {
            var user = users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                var editModel = new UserDto
                {
                    Id = user.Id,
                    Username = user.Username,
                    Email = user.Email,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Roles = user.Roles,
                    IsActive = true
                };

                await UserService.UpdateUserAsync(userId, editModel);
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al activar usuario: {ex.Message}");
        }
    }

    private async Task DeactivateUser(int userId)
    {
        try
        {
            var user = users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                var editModel = new UserDto
                {
                    Id = user.Id,
                    Username = user.Username,
                    Email = user.Email,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Roles = user.Roles,
                    IsActive = false
                };

                await UserService.UpdateUserAsync(userId, editModel);
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al desactivar usuario: {ex.Message}");
        }
    }

    private async Task LockUser(int userId)
    {
        try
        {
            await UserService.LockUserAsync(userId);
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al bloquear usuario: {ex.Message}");
        }
    }

    private async Task UnlockUser(int userId)
    {
        try
        {
            await UserService.UnlockUserAsync(userId);
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al desbloquear usuario: {ex.Message}");
        }
    }
}
