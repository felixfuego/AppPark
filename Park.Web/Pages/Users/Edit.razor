@page "/usuarios/{Id:int}/editar"
@using Park.Web.Services
@using Park.Comun.DTOs
@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Editar Usuario</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-user-edit me-2"></i>
                        Editar Usuario
                    </h5>
                    <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo($"/usuarios/{Id}"))">
                        <i class="fas fa-arrow-left me-2"></i>
                        Volver
                    </button>
                </div>
                <div class="card-body">
                    @if (loading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (user != null)
                    {
                        <EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <!-- Información Personal -->
                                <div class="col-md-6">
                                    <h6 class="mb-3">
                                        <i class="fas fa-user me-2"></i>
                                        Información Personal
                                    </h6>
                                    
                                    <div class="mb-3">
                                        <label for="username" class="form-label">Nombre de Usuario *</label>
                                        <InputText id="username" class="form-control" @bind-Value="editModel.Username" />
                                        <ValidationMessage For="@(() => editModel.Username)" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="email" class="form-label">Email *</label>
                                        <InputText id="email" type="email" class="form-control" @bind-Value="editModel.Email" />
                                        <ValidationMessage For="@(() => editModel.Email)" />
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="firstName" class="form-label">Nombre *</label>
                                                <InputText id="firstName" class="form-control" @bind-Value="editModel.FirstName" />
                                                <ValidationMessage For="@(() => editModel.FirstName)" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="lastName" class="form-label">Apellido *</label>
                                                <InputText id="lastName" class="form-control" @bind-Value="editModel.LastName" />
                                                <ValidationMessage For="@(() => editModel.LastName)" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <InputCheckbox id="isActive" class="form-check-input" @bind-Value="editModel.IsActive" />
                                            <label class="form-check-label" for="isActive">
                                                Usuario Activo
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Roles y Empresas -->
                                <div class="col-md-6">
                                    <h6 class="mb-3">
                                        <i class="fas fa-user-shield me-2"></i>
                                        Roles
                                    </h6>
                                    
                                    <div class="mb-3">
                                        @foreach (var role in availableRoles)
                                        {
                                            var roleId = role.Id;
                                            <div class="form-check">
                                                <input type="checkbox" 
                                                       id="@($"role-{role.Id}")" 
                                                       class="form-check-input" 
                                                       @bind="selectedRoles[roleId]" />
                                                <label class="form-check-label" for="@($"role-{role.Id}")">
                                                    <strong>@role.Name</strong>
                                                    <br />
                                                    <small class="text-muted">@role.Description</small>
                                                </label>
                                            </div>
                                        }
                                    </div>

                                                                         <div class="alert alert-info">
                                         <i class="fas fa-info-circle me-2"></i>
                                         <strong>Nota:</strong> La asignación de empresas se maneja desde el backend según los roles del usuario.
                                     </div>
                                </div>
                            </div>

                            <hr />

                            <!-- Botones -->
                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo($"/usuarios/{Id}"))">
                                    <i class="fas fa-times me-2"></i>
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@saving">
                                    @if (saving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Guardando...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-save me-2"></i>
                                        <span>Guardar Cambios</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-user-slash fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Usuario no encontrado</h5>
                            <p class="text-muted">El usuario con ID @Id no existe o no se pudo cargar.</p>
                            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/usuarios"))">
                                <i class="fas fa-arrow-left me-2"></i>
                                Volver al Listado
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private UserDto? user;
    private UserDto editModel = new();
    private List<RoleDto> availableRoles = new();
    private Dictionary<int, bool> selectedRoles = new();
    private bool loading = true;
    private bool saving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            var userTask = UserService.GetUserByIdAsync(Id);
            var rolesTask = RoleService.GetAllRolesAsync();

            await Task.WhenAll(userTask, rolesTask);

            var userResult = await userTask;
            var rolesResult = await rolesTask;

            user = userResult;
            availableRoles = rolesResult?.ToList() ?? new List<RoleDto>();

            if (user != null)
            {
                // Cargar datos del usuario en el modelo de edición
                editModel.Id = user.Id;
                editModel.Username = user.Username;
                editModel.Email = user.Email;
                editModel.FirstName = user.FirstName;
                editModel.LastName = user.LastName;
                editModel.IsActive = user.IsActive;

                // Inicializar selección de roles
                foreach (var role in availableRoles)
                {
                    selectedRoles[role.Id] = user.Roles.Any(r => r.Id == role.Id);
                }


            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading data:", ex.Message);
        }
        finally
        {
            loading = false;
        }
    }



    private async Task HandleValidSubmit()
    {
        if (!ValidateForm())
        {
            return;
        }

        saving = true;
        try
        {
            // Asignar roles seleccionados
            editModel.Roles = availableRoles
                .Where(r => selectedRoles.ContainsKey(r.Id) && selectedRoles[r.Id])
                .ToList();



            await UserService.UpdateUserAsync(Id, editModel);
            
            await JSRuntime.InvokeVoidAsync("alert", "Usuario actualizado exitosamente");
            Navigation.NavigateTo($"/usuarios/{Id}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar usuario: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }

    private bool ValidateForm()
    {
        // Validar que se haya seleccionado al menos un rol
        if (!selectedRoles.Any(kvp => kvp.Value))
        {
            JSRuntime.InvokeVoidAsync("alert", "Debe seleccionar al menos un rol");
            return false;
        }



        return true;
    }
}
