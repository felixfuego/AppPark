@page "/usuarios/{Id:int}/cambiar-password"
@using Park.Web.Services
@using Park.Comun.DTOs
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Cambiar Contraseña</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-key me-2"></i>
                        Cambiar Contraseña
                    </h5>
                    <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo($"/usuarios/{Id}"))">
                        <i class="fas fa-arrow-left me-2"></i>
                        Volver
                    </button>
                </div>
                <div class="card-body">
                    @if (loading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (user != null)
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Usuario:</strong> @user.FullName (@user.Username)
                        </div>

                        <EditForm Model="@passwordModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="currentPassword" class="form-label">Contraseña Actual *</label>
                                <InputText id="currentPassword" type="password" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
                                <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
                                <div class="form-text">
                                    Ingrese la contraseña actual del usuario para verificar la identidad.
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="newPassword" class="form-label">Nueva Contraseña *</label>
                                <InputText id="newPassword" type="password" class="form-control" @bind-Value="passwordModel.NewPassword" />
                                <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                                <div class="form-text">
                                    La nueva contraseña debe tener al menos 6 caracteres.
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="confirmNewPassword" class="form-label">Confirmar Nueva Contraseña *</label>
                                <InputText id="confirmNewPassword" type="password" class="form-control" @bind-Value="passwordModel.ConfirmNewPassword" />
                                <ValidationMessage For="@(() => passwordModel.ConfirmNewPassword)" />
                                <div class="form-text">
                                    Vuelva a escribir la nueva contraseña para confirmar.
                                </div>
                            </div>

                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Importante:</strong> Al cambiar la contraseña, el usuario deberá usar la nueva contraseña en su próximo inicio de sesión.
                            </div>

                            <hr />

                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo($"/usuarios/{Id}"))">
                                    <i class="fas fa-times me-2"></i>
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@saving">
                                    @if (saving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Cambiando...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-key me-2"></i>
                                        <span>Cambiar Contraseña</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-user-slash fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Usuario no encontrado</h5>
                            <p class="text-muted">El usuario con ID @Id no existe o no se pudo cargar.</p>
                            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/usuarios"))">
                                <i class="fas fa-arrow-left me-2"></i>
                                Volver al Listado
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private UserDto? user;
    private ChangePasswordDto passwordModel = new();
    private bool loading = true;
    private bool saving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        loading = true;
        try
        {
            user = await UserService.GetUserByIdAsync(Id);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading user:", ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!ValidateForm())
        {
            return;
        }

        saving = true;
        try
        {
            await UserService.ChangePasswordAsync(Id, passwordModel.CurrentPassword, passwordModel.NewPassword);
            
            await JSRuntime.InvokeVoidAsync("alert", "Contraseña cambiada exitosamente");
            Navigation.NavigateTo($"/usuarios/{Id}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cambiar contraseña: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }

    private bool ValidateForm()
    {
        // Validar que las contraseñas coincidan
        if (passwordModel.NewPassword != passwordModel.ConfirmNewPassword)
        {
            JSRuntime.InvokeVoidAsync("alert", "Las nuevas contraseñas no coinciden");
            return false;
        }

        // Validar longitud de contraseña
        if (passwordModel.NewPassword.Length < 6)
        {
            JSRuntime.InvokeVoidAsync("alert", "La nueva contraseña debe tener al menos 6 caracteres");
            return false;
        }

        // Validar que la nueva contraseña sea diferente a la actual
        if (passwordModel.CurrentPassword == passwordModel.NewPassword)
        {
            JSRuntime.InvokeVoidAsync("alert", "La nueva contraseña debe ser diferente a la actual");
            return false;
        }

        return true;
    }
}
