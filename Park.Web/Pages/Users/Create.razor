@page "/usuarios/crear"
@using Park.Web.Services
@using Park.Comun.DTOs
@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Crear Usuario</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-user-plus me-2"></i>
                        Crear Nuevo Usuario
                    </h5>
                    <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/usuarios"))">
                        <i class="fas fa-arrow-left me-2"></i>
                        Volver
                    </button>
                </div>
                <div class="card-body">
                    <EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <!-- Información Personal -->
                            <div class="col-md-6">
                                <h6 class="mb-3">
                                    <i class="fas fa-user me-2"></i>
                                    Información Personal
                                </h6>
                                
                                <div class="mb-3">
                                    <label for="username" class="form-label">Nombre de Usuario *</label>
                                    <InputText id="username" class="form-control" @bind-Value="userModel.Username" />
                                    <ValidationMessage For="@(() => userModel.Username)" />
                                </div>

                                <div class="mb-3">
                                    <label for="email" class="form-label">Email *</label>
                                    <InputText id="email" type="email" class="form-control" @bind-Value="userModel.Email" />
                                    <ValidationMessage For="@(() => userModel.Email)" />
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="firstName" class="form-label">Nombre *</label>
                                            <InputText id="firstName" class="form-control" @bind-Value="userModel.FirstName" />
                                            <ValidationMessage For="@(() => userModel.FirstName)" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="lastName" class="form-label">Apellido *</label>
                                            <InputText id="lastName" class="form-control" @bind-Value="userModel.LastName" />
                                            <ValidationMessage For="@(() => userModel.LastName)" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Contraseña -->
                            <div class="col-md-6">
                                <h6 class="mb-3">
                                    <i class="fas fa-lock me-2"></i>
                                    Contraseña
                                </h6>
                                
                                <div class="mb-3">
                                    <label for="password" class="form-label">Contraseña *</label>
                                    <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
                                    <ValidationMessage For="@(() => userModel.Password)" />
                                    <div class="form-text">
                                        La contraseña debe tener al menos 6 caracteres.
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="confirmPassword" class="form-label">Confirmar Contraseña *</label>
                                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="userModel.ConfirmPassword" />
                                    <ValidationMessage For="@(() => userModel.ConfirmPassword)" />
                                </div>
                            </div>
                        </div>

                        <hr />

                        <!-- Roles y Empresas -->
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="mb-3">
                                    <i class="fas fa-user-shield me-2"></i>
                                    Roles
                                </h6>
                                
                                @if (loading)
                                {
                                    <div class="text-center">
                                        <div class="spinner-border spinner-border-sm" role="status">
                                            <span class="visually-hidden">Cargando...</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="mb-3">
                                        @foreach (var role in roles)
                                        {
                                            var roleId = role.Id;
                                            <div class="form-check">
                                                <input type="checkbox" 
                                                       id="@($"role-{role.Id}")" 
                                                       class="form-check-input" 
                                                       @bind="selectedRoles[roleId]" />
                                                <label class="form-check-label" for="@($"role-{role.Id}")">
                                                    <strong>@role.Name</strong>
                                                    <br />
                                                    <small class="text-muted">@role.Description</small>
                                                </label>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                                                         <div class="col-md-6">
                                 <div class="alert alert-info">
                                     <i class="fas fa-info-circle me-2"></i>
                                     <strong>Nota:</strong> Los usuarios se pueden asignar a empresas después de su creación desde la página de edición.
                                 </div>
                             </div>
                        </div>

                        <hr />

                        <!-- Botones -->
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/usuarios"))">
                                <i class="fas fa-times me-2"></i>
                                Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@loading">
                                @if (loading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Creando...</span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <span>Crear Usuario</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterDto userModel = new();
    private List<RoleDto> roles = new();
    private Dictionary<int, bool> selectedRoles = new();
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            var rolesResult = await RoleService.GetAllRolesAsync();
            roles = rolesResult?.ToList() ?? new List<RoleDto>();
            
            // Inicializar diccionario de roles
            foreach (var role in roles)
            {
                selectedRoles[role.Id] = false;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading data:", ex.Message);
        }
        finally
        {
            loading = false;
        }
    }



    private async Task HandleValidSubmit()
    {
        if (!ValidateForm())
        {
            return;
        }

        loading = true;
        try
        {
            // Asignar roles seleccionados
            userModel.RoleIds = selectedRoles
                .Where(kvp => kvp.Value)
                .Select(kvp => kvp.Key)
                .ToList();

            // Log para debugging
            await JSRuntime.InvokeVoidAsync("console.log", "Datos a enviar:", userModel);

            await UserService.CreateUserAsync(userModel);
            
            await JSRuntime.InvokeVoidAsync("alert", "Usuario creado exitosamente");
            Navigation.NavigateTo("/usuarios");
        }
        catch (HttpRequestException ex)
        {
            // Manejar errores HTTP específicos
            if (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error 400 - Datos inválidos: {ex.Message}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error de conexión: {ex.Message}");
            }
            await JSRuntime.InvokeVoidAsync("console.error", "Error HTTP:", ex);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al crear usuario: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", "Error completo:", ex);
        }
        finally
        {
            loading = false;
        }
    }

    private bool ValidateForm()
    {
        // Validar campos requeridos
        if (string.IsNullOrWhiteSpace(userModel.Username))
        {
            JSRuntime.InvokeVoidAsync("alert", "El nombre de usuario es requerido");
            return false;
        }

        if (string.IsNullOrWhiteSpace(userModel.Email))
        {
            JSRuntime.InvokeVoidAsync("alert", "El email es requerido");
            return false;
        }

        if (string.IsNullOrWhiteSpace(userModel.FirstName))
        {
            JSRuntime.InvokeVoidAsync("alert", "El nombre es requerido");
            return false;
        }

        if (string.IsNullOrWhiteSpace(userModel.LastName))
        {
            JSRuntime.InvokeVoidAsync("alert", "El apellido es requerido");
            return false;
        }

        if (string.IsNullOrWhiteSpace(userModel.Password))
        {
            JSRuntime.InvokeVoidAsync("alert", "La contraseña es requerida");
            return false;
        }

        // Validar que se haya seleccionado al menos un rol
        if (!selectedRoles.Any(kvp => kvp.Value))
        {
            JSRuntime.InvokeVoidAsync("alert", "Debe seleccionar al menos un rol");
            return false;
        }

        // Validar que las contraseñas coincidan
        if (userModel.Password != userModel.ConfirmPassword)
        {
            JSRuntime.InvokeVoidAsync("alert", "Las contraseñas no coinciden");
            return false;
        }

        // Validar longitud de contraseña
        if (userModel.Password.Length < 6)
        {
            JSRuntime.InvokeVoidAsync("alert", "La contraseña debe tener al menos 6 caracteres");
            return false;
        }

        // Validar longitud de nombre de usuario
        if (userModel.Username.Length < 3)
        {
            JSRuntime.InvokeVoidAsync("alert", "El nombre de usuario debe tener al menos 3 caracteres");
            return false;
        }

        return true;
    }
}
