@page "/visitas/crear"
@using Park.Web.Models
@using Park.Web.Services
@inject IVisitService VisitService
@inject IVisitorService VisitorService
@inject ICompanyService CompanyService
@inject IGateService GateService
@inject IAuthorizationService AuthorizationService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILogger<Create> Logger
@inject IJSRuntime JSRuntime

<Park.Web.Shared.AuthorizeView RequiredPermission="CreateVisits">
    <ChildContent>
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-plus me-2"></i>
                        Nueva Visita
                    </h1>
                    <p class="text-muted">Programa una nueva visita al parque industrial</p>
                </div>
                <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/visitas"))">
                    <i class="fas fa-arrow-left me-2"></i>
                    Volver
                </button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="@(() => errorMessage = string.Empty)"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @successMessage
                    <button type="button" class="btn-close" @onclick="@(() => successMessage = string.Empty)"></button>
                </div>
            }

            <div class="row">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Información de la Visita</h5>
                        </div>
                        <div class="card-body">
                            <EditForm Model="visit" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="visitor" class="form-label">Visitante *</label>
                                        <div class="input-group">
                                            <InputSelect id="visitor" class="form-select" @bind-Value="visit.VisitorId">
                                                <option value="">Seleccionar visitante...</option>
                                                @if (visitors != null)
                                                {
                                                    @foreach (var visitor in visitors)
                                                    {
                                                        <option value="@visitor.Id">@visitor.FirstName @visitor.LastName - @visitor.DocumentType: @visitor.DocumentNumber</option>
                                                    }
                                                }
                                            </InputSelect>
                                            <button type="button" class="btn btn-outline-primary" @onclick="ShowCreateVisitorModal" title="Crear nuevo visitante">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="@(() => visit.VisitorId)" />
                                        <small class="form-text text-muted">
                                            <i class="fas fa-info-circle me-1"></i>
                                            Si no encuentras el visitante, haz clic en el botón + para crearlo rápidamente.
                                        </small>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="company" class="form-label">Empresa *</label>
                                        <InputSelect id="company" class="form-select" @bind-Value="visit.CompanyId">
                                            <option value="">Seleccionar empresa...</option>
                                            @if (companies != null)
                                            {
                                                @foreach (var company in companies)
                                                {
                                                    <option value="@company.Id">@company.Name - @company.Zone.Name</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => visit.CompanyId)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="gate" class="form-label">Puerta de Entrada *</label>
                                        <InputSelect id="gate" class="form-select" @bind-Value="visit.GateId">
                                            <option value="">Seleccionar puerta...</option>
                                            @if (gates != null)
                                            {
                                                @foreach (var gate in gates)
                                                {
                                                    <option value="@gate.Id">@gate.Name - @gate.GateNumber (@gate.GateType)</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => visit.GateId)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="scheduledDate" class="form-label">Fecha Programada *</label>
                                        <InputDate id="scheduledDate" class="form-control" @bind-Value="visit.ScheduledDate" />
                                        <ValidationMessage For="@(() => visit.ScheduledDate)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="scheduledEndTime" class="form-label">Hora de Fin *</label>
                                        <InputDate id="scheduledEndTime" class="form-control" @bind-Value="visit.ScheduledEndTime" />
                                        <ValidationMessage For="@(() => visit.ScheduledEndTime)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="purpose" class="form-label">Propósito de la Visita *</label>
                                    <InputTextArea id="purpose" class="form-control" rows="3" @bind-Value="visit.Purpose" />
                                    <ValidationMessage For="@(() => visit.Purpose)" />
                                </div>

                                <div class="mb-3">
                                    <label for="notes" class="form-label">Notas Adicionales</label>
                                    <InputTextArea id="notes" class="form-control" rows="3" @bind-Value="visit.Notes" />
                                    <ValidationMessage For="@(() => visit.Notes)" />
                                </div>

                                <div class="d-flex justify-content-end gap-2">
                                    <button type="button" class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/visitas"))">
                                        Cancelar
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Guardando...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save me-2"></i>
                                            <span>Guardar Visita</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Información Adicional</h6>
                        </div>
                        <div class="card-body">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Nota:</strong> Los campos marcados con * son obligatorios.
                            </div>
                            
                            <div class="mb-3">
                                <h6>Estados de Visita</h6>
                                <div class="list-group list-group-flush">
                                    <div class="list-group-item">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-clock text-warning me-2"></i>
                                            <div>
                                                <strong>Programada</strong>
                                                <br />
                                                <small class="text-muted">Visita agendada</small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="list-group-item">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-play text-primary me-2"></i>
                                            <div>
                                                <strong>En Progreso</strong>
                                                <br />
                                                <small class="text-muted">Visitante en el parque</small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="list-group-item">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-check text-success me-2"></i>
                                            <div>
                                                <strong>Completada</strong>
                                                <br />
                                                <small class="text-muted">Visita finalizada</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (visitors != null && visitors.Any())
                            {
                                <div class="mb-3">
                                    <h6>Visitantes Disponibles</h6>
                                    <div class="list-group list-group-flush">
                                        @foreach (var visitor in visitors.Take(5))
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@visitor.FirstName @visitor.LastName</strong>
                                                    <br />
                                                    <small class="text-muted">@visitor.DocumentType: @visitor.DocumentNumber</small>
                                                </div>
                                                <span class="badge bg-primary rounded-pill">@visitor.VisitsCount visitas</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            @if (companies != null && companies.Any())
                            {
                                <div class="mb-3">
                                    <h6>Empresas Disponibles</h6>
                                    <div class="list-group list-group-flush">
                                        @foreach (var company in companies.Take(5))
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@company.Name</strong>
                                                    <br />
                                                    <small class="text-muted">@company.Zone.Name</small>
                                                </div>
                                                <span class="badge bg-success rounded-pill">@company.VisitsCount visitas</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            @if (gates != null && gates.Any())
                            {
                                <div class="mb-3">
                                    <h6>Puertas Disponibles</h6>
                                    <div class="list-group list-group-flush">
                                        @foreach (var gate in gates.Take(5))
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@gate.Name</strong>
                                                    <br />
                                                    <small class="text-muted">@gate.GateNumber</small>
                                                </div>
                                                <span class="badge bg-info rounded-pill">
                                                    @gate.GateType
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Importante:</strong> Una vez creada la visita, podrás hacer check-in y check-out.
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal para crear visitante -->
            <div class="modal fade" id="createVisitorModal" tabindex="-1" aria-labelledby="createVisitorModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="createVisitorModalLabel">
                                <i class="fas fa-user-plus me-2"></i>
                                Nuevo Visitante
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @if (!string.IsNullOrEmpty(modalErrorMessage))
                            {
                                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    @modalErrorMessage
                                    <button type="button" class="btn-close" @onclick="@(() => modalErrorMessage = string.Empty)"></button>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(modalSuccessMessage))
                            {
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    <i class="fas fa-check-circle me-2"></i>
                                    @modalSuccessMessage
                                    <button type="button" class="btn-close" @onclick="@(() => modalSuccessMessage = string.Empty)"></button>
                                </div>
                            }

                            <EditForm Model="newVisitor" OnValidSubmit="HandleCreateVisitorSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="modalFirstName" class="form-label">Nombre *</label>
                                        <InputText id="modalFirstName" class="form-control" @bind-Value="newVisitor.FirstName" />
                                        <ValidationMessage For="@(() => newVisitor.FirstName)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="modalLastName" class="form-label">Apellido *</label>
                                        <InputText id="modalLastName" class="form-control" @bind-Value="newVisitor.LastName" />
                                        <ValidationMessage For="@(() => newVisitor.LastName)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="modalDocumentType" class="form-label">Tipo de Documento *</label>
                                        <InputSelect id="modalDocumentType" class="form-select" @bind-Value="newVisitor.DocumentType">
                                            <option value="">Seleccionar tipo...</option>
                                            <option value="CC">Cédula de Ciudadanía</option>
                                            <option value="CE">Cédula de Extranjería</option>
                                            <option value="TI">Tarjeta de Identidad</option>
                                            <option value="PP">Pasaporte</option>
                                            <option value="NIT">NIT</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => newVisitor.DocumentType)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="modalDocumentNumber" class="form-label">Número de Documento *</label>
                                        <InputText id="modalDocumentNumber" class="form-control" @bind-Value="newVisitor.DocumentNumber" />
                                        <ValidationMessage For="@(() => newVisitor.DocumentNumber)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="modalEmail" class="form-label">Correo Electrónico</label>
                                        <InputText id="modalEmail" class="form-control" @bind-Value="newVisitor.Email" type="email" />
                                        <ValidationMessage For="@(() => newVisitor.Email)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="modalPhone" class="form-label">Teléfono</label>
                                        <InputText id="modalPhone" class="form-control" @bind-Value="newVisitor.Phone" />
                                        <ValidationMessage For="@(() => newVisitor.Phone)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="modalCompany" class="form-label">Empresa</label>
                                    <InputText id="modalCompany" class="form-control" @bind-Value="newVisitor.Company" />
                                    <ValidationMessage For="@(() => newVisitor.Company)" />
                                </div>

                                <div class="mb-3">
                                    <label for="modalAddress" class="form-label">Dirección</label>
                                    <InputTextArea id="modalAddress" class="form-control" rows="2" @bind-Value="newVisitor.Address" />
                                    <ValidationMessage For="@(() => newVisitor.Address)" />
                                </div>

                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputCheckbox id="modalIsActive" class="form-check-input" @bind-Value="newVisitor.IsActive" />
                                        <label class="form-check-label" for="modalIsActive">
                                            Visitante Activo
                                        </label>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-end gap-2">
                                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseCreateVisitorModal">
                                        Cancelar
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isCreatingVisitor">
                                        @if (isCreatingVisitor)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Guardando...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save me-2"></i>
                                            <span>Guardar Visitante</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
                         </div>
         </div>

         <!-- Modal para mostrar QR generado -->
         @if (showQRModal && qrVisit != null)
         {
             <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
                 <div class="modal-dialog modal-dialog-centered modal-lg">
                     <div class="modal-content">
                         <div class="modal-header bg-success text-white">
                             <h5 class="modal-title">
                                 <i class="fas fa-qrcode me-2"></i>
                                 Código QR Generado
                             </h5>
                             <button type="button" class="btn-close btn-close-white" @onclick="CloseQRModal"></button>
                         </div>
                         <div class="modal-body text-center">
                             <div class="alert alert-success">
                                 <i class="fas fa-check-circle me-2"></i>
                                 <strong>¡Visita creada exitosamente!</strong>
                                 <br />
                                 Se ha generado el código QR para la visita.
                             </div>
                             
                             <div class="row">
                                 <div class="col-md-6">
                                     <h6>Información de la Visita</h6>
                                     <div class="text-start">
                                         <p><strong>Visitante:</strong> @qrVisit.Visitor.FirstName @qrVisit.Visitor.LastName</p>
                                         <p><strong>Empresa:</strong> @qrVisit.Company.Name</p>
                                         <p><strong>Código de Visita:</strong> @qrVisit.VisitCode</p>
                                         <p><strong>Fecha:</strong> @qrVisit.ScheduledDate.ToString("dd/MM/yyyy HH:mm")</p>
                                         <p><strong>Puerta:</strong> @qrVisit.Gate.Name</p>
                                     </div>
                                 </div>
                                 <div class="col-md-6">
                                     <h6>Código QR</h6>
                                     <div class="border p-3 bg-light rounded">
                                         <canvas id="qrCanvas" width="200" height="200"></canvas>
                                         <div class="mt-2">
                                             <small class="text-muted">Código: @qrVisit.VisitCode</small>
                                         </div>
                                     </div>
                                 </div>
                             </div>
                             
                             <div class="alert alert-info mt-3">
                                 <i class="fas fa-info-circle me-2"></i>
                                 <strong>Instrucciones:</strong> El guardia puede escanear este código QR para realizar el check-in/check-out de la visita.
                             </div>
                         </div>
                         <div class="modal-footer">
                             <button type="button" class="btn btn-outline-secondary" @onclick="DownloadQR">
                                 <i class="fas fa-download me-2"></i>
                                 Descargar QR
                             </button>
                             <button type="button" class="btn btn-outline-primary" @onclick="PrintQR">
                                 <i class="fas fa-print me-2"></i>
                                 Imprimir QR
                             </button>
                             <button type="button" class="btn btn-success" @onclick="ContinueToVisits">
                                 <i class="fas fa-check me-2"></i>
                                 Continuar
                             </button>
                         </div>
                     </div>
                 </div>
             </div>
         }
     </ChildContent>
    <NotAuthorized>
        <div class="text-center">
            <h3>Acceso Denegado</h3>
            <p>No tienes permisos para crear visitas.</p>
            <a href="/visitas" class="btn btn-primary">Volver a Visitas</a>
        </div>
    </NotAuthorized>
</Park.Web.Shared.AuthorizeView>

@code {
    private CreateVisit visit = new()
    {
        ScheduledDate = DateTime.Today,
        ScheduledEndTime = DateTime.Today.AddHours(18) // Hora por defecto: 6:00 PM
    };
    private List<Visitor>? visitors;
    private List<Company>? companies;
    private List<Gate>? gates;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Modal state
    private CreateVisitor newVisitor = new();
    private bool isCreatingVisitor = false;
    private string modalErrorMessage = string.Empty;
    private string modalSuccessMessage = string.Empty;
    private string modalId = "createVisitorModal";
    
    // QR Modal state
    private Visit? qrVisit = null;
    private bool showQRModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                Logger.LogError("Usuario no autenticado");
                return;
            }

            var visitorsTask = VisitorService.GetAllAsync();
            
            // Filtrar empresas según permisos del usuario
            List<Company> userCompanies;
            var allCompanies = await CompanyService.GetAllAsync();
            
            if (await AuthorizationService.IsAdminAsync(currentUser.Id))
            {
                // Admin puede ver todas las empresas
                userCompanies = allCompanies?.ToList() ?? new List<Company>();
                Logger.LogInformation("Admin {UserId} - mostrando todas las empresas ({Count})", currentUser.Id, userCompanies.Count);
            }
            else if (currentUser.Roles.Any(r => r.Name == "Guardia"))
            {
                // Guardia puede ver todas las empresas para gestionar visitas
                userCompanies = allCompanies?.ToList() ?? new List<Company>();
                Logger.LogInformation("Guardia {UserId} - mostrando todas las empresas ({Count})", currentUser.Id, userCompanies.Count);
            }
            else
            {
                // EmpAdmin y GestorVisitas solo pueden ver sus empresas asignadas
                var accessibleCompanyIds = await AuthorizationService.GetAccessibleCompanyIdsAsync(currentUser.Id);
                
                // TEMPORAL: Si no tiene empresas asignadas, mostrar todas las empresas para debug
                if (!accessibleCompanyIds.Any())
                {
                    Logger.LogWarning("Usuario {UserId} ({Roles}) no tiene empresas asignadas - mostrando todas las empresas temporalmente", 
                        currentUser.Id, string.Join(", ", currentUser.Roles.Select(r => r.Name)));
                    userCompanies = allCompanies?.ToList() ?? new List<Company>();
                }
                else
                {
                    userCompanies = allCompanies?.Where(c => accessibleCompanyIds.Contains(c.Id)).ToList() ?? new List<Company>();
                    Logger.LogInformation("Usuario {UserId} ({Roles}) - empresas accesibles: {CompanyIds}, mostrando {Count} empresas", 
                        currentUser.Id, 
                        string.Join(", ", currentUser.Roles.Select(r => r.Name)),
                        string.Join(", ", accessibleCompanyIds),
                        userCompanies.Count);
                }
            }

            // Filtrar puertas según permisos del usuario
            List<Gate> userGates;
            if (await AuthorizationService.IsAdminAsync(currentUser.Id))
            {
                var allGates = await GateService.GetAllAsync();
                userGates = allGates?.ToList() ?? new List<Gate>();
            }
            else if (currentUser.Roles.Any(r => r.Name == "Guardia"))
            {
                var accessibleGateIds = await AuthorizationService.GetAccessibleGateIdsAsync(currentUser.Id);
                var allGates = await GateService.GetAllAsync();
                userGates = allGates?.Where(g => accessibleGateIds.Contains(g.Id)).ToList() ?? new List<Gate>();
            }
            else
            {
                // EmpAdmin y GestorVisitas pueden ver todas las puertas para crear visitas
                var allGates = await GateService.GetAllAsync();
                userGates = allGates?.ToList() ?? new List<Gate>();
            }

            await visitorsTask;

            visitors = visitorsTask.Result?.ToList() ?? new List<Visitor>();
            companies = userCompanies;
            gates = userGates;

            Logger.LogInformation("Datos cargados: {VisitorCount} visitantes, {CompanyCount} empresas, {GateCount} puertas", 
                visitors.Count, companies.Count, gates.Count);
            
            // Debug adicional
            if (companies.Count == 0)
            {
                Logger.LogWarning("¡ADVERTENCIA! No se cargaron empresas para el usuario {UserId} con roles: {Roles}", 
                    currentUser.Id, string.Join(", ", currentUser.Roles.Select(r => r.Name)));
            }
            else
            {
                Logger.LogInformation("Empresas cargadas para usuario {UserId}: {CompanyNames}", 
                    currentUser.Id, string.Join(", ", companies.Select(c => $"{c.Name} (ID: {c.Id})")));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos");
            visitors = new List<Visitor>();
            companies = new List<Company>();
            gates = new List<Gate>();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Log de debug para ver qué datos se están enviando
            Logger.LogInformation("Intentando crear visita con datos: VisitorId={VisitorId}, CompanyId={CompanyId}, GateId={GateId}, ScheduledDate={ScheduledDate}, ScheduledEndTime={ScheduledEndTime}, Purpose={Purpose}", 
                visit.VisitorId, visit.CompanyId, visit.GateId, visit.ScheduledDate, visit.ScheduledEndTime, visit.Purpose);

            var result = await VisitService.CreateAsync(visit);
            
            if (result != null)
            {
                Logger.LogInformation("Visita creada exitosamente con ID: {Id}", result.Id);
                successMessage = $"Visita programada exitosamente para {result.Visitor.FirstName} {result.Visitor.LastName}.";
                
                // Generar QR automáticamente
                var qrCode = await VisitService.GenerateQRCodeAsync(result.Id);
                if (!string.IsNullOrEmpty(qrCode))
                {
                    result.QRCode = qrCode;
                    ShowQRModal(result);
                }
                else
                {
                    // Si no se puede generar QR, continuar normalmente
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/visitas");
                }
            }
            else
            {
                Logger.LogWarning("La creación de visita falló - el servicio devolvió null");
                errorMessage = "Error al crear la visita. Por favor, inténtalo de nuevo.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al crear visita");
            errorMessage = $"Error al crear la visita: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    // Modal methods
    private async Task ShowCreateVisitorModal()
    {
        // Reset modal form
        newVisitor = new CreateVisitor();
        modalErrorMessage = string.Empty;
        modalSuccessMessage = string.Empty;
        isCreatingVisitor = false;
        
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task CloseCreateVisitorModal()
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }

    // QR Modal methods
    private void ShowQRModal(Visit visit)
    {
        qrVisit = visit;
        showQRModal = true;
        StateHasChanged();
    }

    private void CloseQRModal()
    {
        showQRModal = false;
        qrVisit = null;
        StateHasChanged();
    }

    private async Task DownloadQR()
    {
        if (qrVisit != null && !string.IsNullOrEmpty(qrVisit.QRCode))
        {
            await JSRuntime.InvokeVoidAsync("downloadQRCode", qrVisit.QRCode, $"QR_Visita_{qrVisit.VisitCode}.png");
        }
    }

    private async Task PrintQR()
    {
        if (qrVisit != null && !string.IsNullOrEmpty(qrVisit.QRCode))
        {
            await JSRuntime.InvokeVoidAsync("printQRCode", qrVisit.QRCode, qrVisit.VisitCode);
        }
    }

    private async Task ContinueToVisits()
    {
        CloseQRModal();
        Navigation.NavigateTo("/visitas");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showQRModal && qrVisit != null && !string.IsNullOrEmpty(qrVisit.QRCode))
        {
            // Generar QR visual en el canvas
            await JSRuntime.InvokeVoidAsync("generateVisualQR", qrVisit.QRCode, "qrCanvas");
        }
    }

    private async Task HandleCreateVisitorSubmit()
    {
        try
        {
            isCreatingVisitor = true;
            modalErrorMessage = string.Empty;
            modalSuccessMessage = string.Empty;

            Logger.LogInformation("Intentando crear visitante desde modal: {DocumentType} {DocumentNumber}", 
                newVisitor.DocumentType, newVisitor.DocumentNumber);

            var result = await VisitorService.CreateAsync(newVisitor);
            
            if (result != null)
            {
                Logger.LogInformation("Visitante creado exitosamente desde modal con ID: {Id}", result.Id);
                modalSuccessMessage = $"Visitante {result.FirstName} {result.LastName} creado exitosamente.";
                
                // Add the new visitor to the list
                if (visitors != null)
                {
                    visitors.Add(result);
                }
                else
                {
                    // Reload the entire list if it was null
                    await LoadData();
                }

                // Auto-select the newly created visitor
                visit.VisitorId = result.Id;
                
                // Close modal after a short delay
                await Task.Delay(1000);
                await CloseCreateVisitorModal();
                
                Logger.LogInformation("Visitante creado y seleccionado automáticamente: {VisitorId}", result.Id);
            }
            else
            {
                Logger.LogWarning("La creación de visitante desde modal falló - el servicio devolvió null");
                modalErrorMessage = "Error al crear el visitante. Por favor, inténtalo de nuevo.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al crear visitante desde modal");
            modalErrorMessage = $"Error al crear el visitante: {ex.Message}";
        }
        finally
        {
            isCreatingVisitor = false;
            StateHasChanged();
        }
    }
}
