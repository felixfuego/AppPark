@page "/visitas"
@using Park.Web.Models
@using Park.Web.Services
@using Park.Web.Shared
@inject IVisitService VisitService
@inject ICompanyService CompanyService
@inject IAuthorizationService AuthorizationService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Index> Logger

<PageTitle>Gestión de Visitas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-calendar-check me-2"></i>
                        Gestión de Visitas
                    </h5>
                    <Park.Web.Shared.AuthorizeView RequiredPermission="CreateVisits">
                        <ChildContent>
                            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/visitas/crear"))">
                                <i class="fas fa-plus me-2"></i>
                                Nueva Visita
                            </button>
                        </ChildContent>
                        <NotAuthorized>
                            <div class="text-muted">
                                <small>No tienes permisos para crear visitas</small>
                            </div>
                        </NotAuthorized>
                    </Park.Web.Shared.AuthorizeView>
                </div>
                <div class="card-body">
                    <!-- Filtros -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Buscar visitas..." 
                                       @bind="searchTerm" @bind:event="oninput" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <select class="form-select" @bind="statusFilter">
                                <option value="">Todos los estados</option>
                                <option value="Pending">Programada</option>
                                <option value="InProgress">En Progreso</option>
                                <option value="Completed">Completada</option>
                                <option value="Cancelled">Cancelada</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <select class="form-select" @bind="companyFilter">
                                <option value="0">Todas las empresas</option>
                                @foreach (var company in accessibleCompanies)
                                {
                                    <option value="@company.Id">@company.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <input type="date" class="form-control" @bind="dateFilter" />
                        </div>
                        <div class="col-md-3">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-outline-secondary" @onclick="LoadVisits">
                                    <i class="fas fa-sync-alt me-1"></i>
                                    Actualizar
                                </button>
                                <button type="button" class="btn btn-outline-info" @onclick="ExportVisits">
                                    <i class="fas fa-download me-1"></i>
                                    Exportar
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Estadísticas -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-primary text-white">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <h4 class="mb-0">@totalVisits</h4>
                                            <small>Total Visitas</small>
                                        </div>
                                        <div class="align-self-center">
                                            <i class="fas fa-calendar fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <h4 class="mb-0">@scheduledVisits</h4>
                                            <small>Programadas</small>
                                        </div>
                                        <div class="align-self-center">
                                            <i class="fas fa-clock fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <h4 class="mb-0">@inProgressVisits</h4>
                                            <small>En Progreso</small>
                                        </div>
                                        <div class="align-self-center">
                                            <i class="fas fa-play fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <h4 class="mb-0">@completedVisits</h4>
                                            <small>Completadas</small>
                                        </div>
                                        <div class="align-self-center">
                                            <i class="fas fa-check fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tabla de Visitas -->
                    @if (loading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Cargando visitas...</p>
                        </div>
                    }
                    else if (filteredVisits.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Código</th>
                                        <th>Visitante</th>
                                        <th>Empresa</th>
                                        <th>Propósito</th>
                                        <th>Fecha Programada</th>
                                        <th>Puerta</th>
                                        <th>Estado</th>
                                        <th>Creado Por</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var visit in paginatedVisits)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@visit.VisitCode</strong>
                                                @if (!string.IsNullOrEmpty(visit.QRCode))
                                                {
                                                    <br />
                                                    <small class="text-muted">
                                                        <i class="fas fa-qrcode me-1"></i>
                                                        QR Disponible
                                                    </small>
                                                }
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@visit.Visitor.FullName</strong>
                                                    <br />
                                                    <small class="text-muted">@visit.Visitor.Email</small>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@visit.Company.Name</span>
                                            </td>
                                            <td>@visit.Purpose</td>
                                            <td>
                                                <div>
                                                    <strong>@visit.ScheduledDate.ToString("dd/MM/yyyy")</strong>
                                                    <br />
                                                    <small class="text-muted">
                                                        @visit.ScheduledDate.ToString("HH:mm") - @visit.ScheduledEndTime.ToString("HH:mm")
                                                    </small>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@visit.Gate.Name</span>
                                            </td>
                                            <td>
                                                @switch (visit.Status)
                                                {
                                                    case VisitStatus.Pending:
                                                        <span class="badge bg-warning">Programada</span>
                                                        break;
                                                    case VisitStatus.InProgress:
                                                        <span class="badge bg-info">En Progreso</span>
                                                        break;
                                                    case VisitStatus.Completed:
                                                        <span class="badge bg-success">Completada</span>
                                                        break;
                                                    case VisitStatus.Cancelled:
                                                        <span class="badge bg-danger">Cancelada</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@visit.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                <small>@visit.CreatedBy.FullName</small>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <Park.Web.Shared.AuthorizeView RequiredPermission="ViewVisit" VisitId="@visit.Id">
                                                        <ChildContent>
                                                            <button class="btn btn-sm btn-outline-info" 
                                                                    @onclick="@(() => Navigation.NavigateTo($"/visitas/{visit.Id}"))"
                                                                    title="Ver detalles">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                        </ChildContent>
                                                    </Park.Web.Shared.AuthorizeView>
                                                    
                                                    <Park.Web.Shared.AuthorizeView RequiredPermission="ManageVisit" VisitId="@visit.Id">
                                                        <ChildContent>
                                                            <button class="btn btn-sm btn-outline-warning" 
                                                                    @onclick="@(() => Navigation.NavigateTo($"/visitas/{visit.Id}/editar"))"
                                                                    title="Editar visita">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                        </ChildContent>
                                                    </Park.Web.Shared.AuthorizeView>
                                                    
                                                    <Park.Web.Shared.AuthorizeView RequiredPermission="CheckInOutVisit" VisitId="@visit.Id" GateId="@visit.GateId">
                                                        <ChildContent>
                                                            @if (visit.Status == VisitStatus.Pending)
                                                            {
                                                                <button class="btn btn-sm btn-outline-success" 
                                                                        @onclick="@(() => CheckInVisit(visit))"
                                                                        title="Check-in">
                                                                    <i class="fas fa-sign-in-alt"></i>
                                                                </button>
                                                            }
                                                            else if (visit.Status == VisitStatus.InProgress)
                                                            {
                                                                <button class="btn btn-sm btn-outline-danger" 
                                                                        @onclick="@(() => CheckOutVisit(visit))"
                                                                        title="Check-out">
                                                                    <i class="fas fa-sign-out-alt"></i>
                                                                </button>
                                                            }
                                                        </ChildContent>
                                                    </Park.Web.Shared.AuthorizeView>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Paginación -->
                        @if (totalPages > 1)
                        {
                            <nav aria-label="Navegación de páginas">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="@(() => ChangePage(currentPage - 1))">
                                            <i class="fas fa-chevron-left"></i>
                                        </button>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="@(() => ChangePage(i))">@i</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="@(() => ChangePage(currentPage + 1))">
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No hay visitas</h5>
                            <p class="text-muted">No se encontraron visitas con los filtros aplicados.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Visit> allVisits = new();
    private List<Company> accessibleCompanies = new();
    private bool loading = true;
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;
    private int companyFilter = 0;
    private DateTime? dateFilter;
    private int currentPage = 1;
    private int pageSize = 10;

    private IEnumerable<Visit> filteredVisits => allVisits
        .Where(v => string.IsNullOrEmpty(searchTerm) || 
                   v.VisitCode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.Visitor.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.Company.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.Purpose.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(v => string.IsNullOrEmpty(statusFilter) || v.Status.ToString() == statusFilter)
        .Where(v => companyFilter == 0 || v.CompanyId == companyFilter)
        .Where(v => !dateFilter.HasValue || v.ScheduledDate.Date == dateFilter.Value.Date)
        .OrderByDescending(v => v.ScheduledDate);

    private IEnumerable<Visit> paginatedVisits => filteredVisits
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int totalPages => (int)Math.Ceiling((double)filteredVisits.Count() / pageSize);

    // Estadísticas
    private int totalVisits => allVisits.Count;
    private int scheduledVisits => allVisits.Count(v => v.Status == VisitStatus.Pending);
    private int inProgressVisits => allVisits.Count(v => v.Status == VisitStatus.InProgress);
    private int completedVisits => allVisits.Count(v => v.Status == VisitStatus.Completed);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;
            
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null) return;

            // Cargar empresas accesibles
            var companyIds = await AuthorizationService.GetAccessibleCompanyIdsAsync(currentUser.Id);
            accessibleCompanies = new List<Company>();
            
            foreach (var companyId in companyIds)
            {
                var company = await CompanyService.GetByIdAsync(companyId);
                if (company != null)
                    accessibleCompanies.Add(company);
            }

            // Cargar visitas según permisos
            if (await AuthorizationService.IsAdminAsync(currentUser.Id))
            {
                // Admin ve todas las visitas
                allVisits = (await VisitService.GetAllAsync())?.ToList() ?? new List<Visit>();
            }
            else if (await AuthorizationService.CanManageVisitsAsync(currentUser.Id))
            {
                // Operacion y Guardia ven todas las visitas (Operacion para gestión, Guardia para check-in/out)
                allVisits = (await VisitService.GetAllAsync())?.ToList() ?? new List<Visit>();
            }
            else
            {
                // Otros roles ven solo visitas de sus empresas
                allVisits = new List<Visit>();
                foreach (var companyId in companyIds)
                {
                    var companyVisits = await VisitService.GetByCompanyAsync(companyId);
                    if (companyVisits != null)
                        allVisits.AddRange(companyVisits);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos de visitas");
            allVisits = new List<Visit>();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadVisits()
    {
        await LoadData();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private async Task CheckInVisit(Visit visit)
    {
        try
        {
            var checkIn = new VisitCheckIn
            {
                VisitCode = visit.VisitCode,
                QRCode = visit.QRCode
            };

            var result = await VisitService.CheckInAsync(checkIn);
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Check-in realizado correctamente");
                await LoadData();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al realizar check-in");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al realizar check-in de visita {VisitId}", visit.Id);
            await JSRuntime.InvokeVoidAsync("alert", "Error al realizar check-in: " + ex.Message);
        }
    }

    private async Task CheckOutVisit(Visit visit)
    {
        try
        {
            var checkOut = new VisitCheckOut
            {
                VisitCode = visit.VisitCode,
                Notes = "Check-out realizado por guardia"
            };

            var result = await VisitService.CheckOutAsync(checkOut);
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Check-out realizado correctamente");
                await LoadData();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al realizar check-out");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al realizar check-out de visita {VisitId}", visit.Id);
            await JSRuntime.InvokeVoidAsync("alert", "Error al realizar check-out: " + ex.Message);
        }
    }

    private async Task ExportVisits()
    {
        try
        {
            // Implementar exportación de visitas
            await JSRuntime.InvokeVoidAsync("alert", "Funcionalidad de exportación en desarrollo");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al exportar visitas");
            await JSRuntime.InvokeVoidAsync("alert", "Error al exportar visitas");
        }
    }
}
