@page "/zones/create"
@using Park.Web.Models
@using Park.Web.Services
@inject IZoneService ZoneService
@inject ICompanyService CompanyService
@inject NavigationManager Navigation
@inject ILogger<Create> Logger

<AuthorizeView>
    <ChildContent>
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-plus me-2"></i>
                        Nueva Zona
                    </h1>
                    <p class="text-muted">Registra una nueva zona en el parque industrial</p>
                </div>
                <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/zones"))">
                    <i class="fas fa-arrow-left me-2"></i>
                    Volver
                </button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="@(() => errorMessage = string.Empty)"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @successMessage
                    <button type="button" class="btn-close" @onclick="@(() => successMessage = string.Empty)"></button>
                </div>
            }

            <div class="row">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Información de la Zona</h5>
                        </div>
                        <div class="card-body">
                            <EditForm Model="zone" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="name" class="form-label">Nombre de la Zona *</label>
                                        <InputText id="name" class="form-control" @bind-Value="zone.Name" />
                                        <ValidationMessage For="@(() => zone.Name)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="capacity" class="form-label">Capacidad *</label>
                                        <InputNumber id="capacity" class="form-control" @bind-Value="zone.Capacity" />
                                        <ValidationMessage For="@(() => zone.Capacity)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">Descripción</label>
                                    <InputTextArea id="description" class="form-control" rows="3" @bind-Value="zone.Description" />
                                    <ValidationMessage For="@(() => zone.Description)" />
                                </div>

                                <div class="mb-3">
                                    <label for="location" class="form-label">Ubicación</label>
                                    <InputText id="location" class="form-control" @bind-Value="zone.Location" />
                                    <ValidationMessage For="@(() => zone.Location)" />
                                </div>

                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="zone.IsActive" />
                                        <label class="form-check-label" for="isActive">
                                            Zona Activa
                                        </label>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-end gap-2">
                                    <button type="button" class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/zones"))">
                                        Cancelar
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Guardando...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save me-2"></i>
                                            <span>Guardar Zona</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Información Adicional</h6>
                        </div>
                        <div class="card-body">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Nota:</strong> Los campos marcados con * son obligatorios.
                            </div>
                            
                            <div class="mb-3">
                                <h6>Estadísticas del Parque</h6>
                                <div class="list-group list-group-flush">
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>Total de Zonas</strong>
                                        </div>
                                        <span class="badge bg-primary rounded-pill">@(zones?.Count ?? 0)</span>
                                    </div>
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>Total de Empresas</strong>
                                        </div>
                                        <span class="badge bg-success rounded-pill">@(companies?.Count ?? 0)</span>
                                    </div>
                                </div>
                            </div>

                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Importante:</strong> Una vez creada la zona, podrás asignar empresas y puertas a ella.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </ChildContent>
    <NotAuthorized>
        <div class="text-center">
            <h3>Acceso Denegado</h3>
            <p>Debes iniciar sesión para crear zonas.</p>
            <a href="/login" class="btn btn-primary">Iniciar Sesión</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private CreateZone zone = new();
    private List<Zone>? zones;
    private List<Company>? companies;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatistics();
    }

    private async Task LoadStatistics()
    {
        try
        {
            var zonesTask = ZoneService.GetAllAsync();
            var companiesTask = CompanyService.GetAllAsync();

            await Task.WhenAll(zonesTask, companiesTask);

            zones = zonesTask.Result?.ToList() ?? new List<Zone>();
            companies = companiesTask.Result?.ToList() ?? new List<Company>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar estadísticas");
            zones = new List<Zone>();
            companies = new List<Company>();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Log de debug para ver qué datos se están enviando
            Logger.LogInformation("Intentando crear zona con datos: Name={Name}, Capacity={Capacity}, Description={Description}, Location={Location}, IsActive={IsActive}", 
                zone.Name, zone.Capacity, zone.Description, zone.Location, zone.IsActive);

            var result = await ZoneService.CreateAsync(zone);
            
            if (result != null)
            {
                Logger.LogInformation("Zona creada exitosamente con ID: {Id}", result.Id);
                successMessage = $"Zona '{result.Name}' creada exitosamente.";
                
                // Esperar un momento para que el usuario vea el mensaje
                await Task.Delay(1500);
                Navigation.NavigateTo("/zones");
            }
            else
            {
                Logger.LogWarning("La creación de zona falló - el servicio devolvió null");
                errorMessage = "Error al crear la zona. Por favor, inténtalo de nuevo.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al crear zona");
            errorMessage = $"Error al crear la zona: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
