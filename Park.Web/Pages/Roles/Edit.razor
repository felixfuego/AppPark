@page "/roles/edit/{Id:int}"
@using Park.Web.Services
@using Park.Web.Models
@using Park.Comun.DTOs
@inject IRoleService RoleService
@inject NavigationManager Navigation
@inject ILogger<Edit> Logger

<PageTitle>Editar Rol</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="fas fa-user-shield"></i>
                        Editar Rol
                    </h4>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (role == null)
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i>
                            Rol no encontrado
                        </div>
                    }
                    else
                    {
                        <EditForm Model="role" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="name" class="form-label">Nombre del Rol</label>
                                <InputText id="name" class="form-control" @bind-Value="role.Name" />
                                <ValidationMessage For="@(() => role.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Descripci√≥n</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="role.Description" rows="3" />
                                <ValidationMessage For="@(() => role.Description)" />
                            </div>

                            <div class="mb-3">
                                <div class="form-check">
                                    <InputCheckbox id="isActive" class="form-check-input" @bind-Value="role.IsActive" />
                                    <label class="form-check-label" for="isActive">
                                        Rol Activo
                                    </label>
                                </div>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="GoBack">
                                    <i class="fas fa-arrow-left"></i>
                                    Volver
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span>Guardando...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-save"></i>
                                        <span>Guardar Cambios</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private RoleDto? role;
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            role = await RoleService.GetRoleByIdAsync(Id);
            
            if (role == null)
            {
                Logger.LogWarning("Rol con ID {RoleId} no encontrado", Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error cargando rol con ID {RoleId}", Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (role == null) return;

        try
        {
            isSubmitting = true;
            var updatedRole = await RoleService.UpdateRoleAsync(Id, new UpdateRoleDto
            {
                Name = role.Name,
                Description = role.Description,
                IsActive = role.IsActive
            });

            if (updatedRole != null)
            {
                Logger.LogInformation("Rol {RoleName} actualizado exitosamente", role.Name);
                Navigation.NavigateTo("/roles");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error actualizando rol con ID {RoleId}", Id);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/roles");
    }
}
