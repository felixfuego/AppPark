@page "/reports"
@using Park.Web.Models
@using Park.Web.Services
@inject IVisitService VisitService
@inject ICompanyService CompanyService
@inject NavigationManager Navigation
@inject ILogger<Reports> Logger
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <ChildContent>
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-chart-bar me-2"></i>
                        Reportes y Estadísticas
                    </h1>
                    <p class="text-muted">Análisis detallado de visitas y actividad del parque industrial</p>
                </div>
                <div class="btn-group">
                    <button class="btn btn-outline-success" @onclick="ExportToExcel" disabled="@isExporting">
                        @if (isExporting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Exportando...</span>
                        }
                        else
                        {
                            <i class="fas fa-file-excel me-2"></i>
                            <span>Exportar Excel</span>
                        }
                    </button>
                    <button class="btn btn-outline-primary" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-2"></i>
                        Actualizar
                    </button>
                </div>
            </div>

            <!-- Filtros -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Filtros de Búsqueda</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label for="startDate" class="form-label">Fecha Desde</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="filters.StartDate" />
                        </div>
                        <div class="col-md-3 mb-3">
                            <label for="endDate" class="form-label">Fecha Hasta</label>
                            <InputDate id="endDate" class="form-control" @bind-Value="filters.EndDate" />
                        </div>
                        <div class="col-md-3 mb-3">
                            <label for="companyFilter" class="form-label">Empresa</label>
                            <InputSelect id="companyFilter" class="form-select" @bind-Value="filters.CompanyId">
                                <option value="">Todas las empresas</option>
                                @if (companies != null)
                                {
                                    @foreach (var company in companies)
                                    {
                                        <option value="@company.Id">@company.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label for="statusFilter" class="form-label">Estado</label>
                            <InputSelect id="statusFilter" class="form-select" @bind-Value="filters.Status">
                                <option value="">Todos los estados</option>
                                <option value="Scheduled">Programada</option>
                                <option value="InProgress">En Progreso</option>
                                <option value="Completed">Completada</option>
                                <option value="Cancelled">Cancelada</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-primary" @onclick="ApplyFilters" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Aplicando...</span>
                            }
                            else
                            {
                                <i class="fas fa-search me-2"></i>
                                <span>Aplicar Filtros</span>
                            }
                        </button>
                    </div>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2">Cargando reportes...</p>
                </div>
            }
            else
            {
                <!-- Métricas Resumidas -->
                <div class="row mb-4">
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-primary shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                            Total de Visitas
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">@metrics.TotalVisits</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-calendar fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-success shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                            Visitas Completadas
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">@metrics.CompletedVisits</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-warning shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                            Visitas Pendientes
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">@metrics.PendingVisits</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-clock fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="card border-left-info shadow h-100 py-2">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                            Visitantes Únicos
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800">@metrics.UniqueVisitors</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-users fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Gráficos -->
                <div class="row mb-4">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Visitas por Día</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="visitsChart" width="400" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Estado de Visitas</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="statusChart" width="400" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Visitas por Empresa</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="companyChart" width="400" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Horarios de Visita</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="hourChart" width="400" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tabla Detallada -->
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Detalle de Visitas (@filteredVisits.Count())</h5>
                            <div class="input-group" style="width: 300px;">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Buscar visitas..." 
                                       @bind="searchTerm" @bind:event="oninput" />
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Visitante</th>
                                        <th>Empresa</th>
                                        <th>Fecha</th>
                                        <th>Estado</th>
                                        <th>Check-in</th>
                                        <th>Check-out</th>
                                        <th>Duración</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var visit in paginatedVisits)
                                    {
                                        <tr>
                                            <td>
                                                <div>
                                                    <strong>@visit.Visitor.FirstName @visit.Visitor.LastName</strong>
                                                    <br />
                                                    <small class="text-muted">@visit.Visitor.DocumentType: @visit.Visitor.DocumentNumber</small>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@visit.Company.Name</strong>
                                                    <br />
                                                    <small class="text-muted">@visit.Company.Zone.Name</small>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <div><strong>@visit.ScheduledDate.ToString("dd/MM/yyyy")</strong></div>
                                                    <small class="text-muted">@visit.ScheduledDate.ToString("HH:mm") - @visit.ScheduledEndTime.ToString("HH:mm")</small>
                                                </div>
                                            </td>
                                            <td>
                                                @switch (visit.Status)
                                                {
                                                    case VisitStatus.Pending:
                                                        <span class="badge bg-warning">Pendiente</span>
                                                        break;
                                                    case VisitStatus.InProgress:
                                                        <span class="badge bg-primary">En Progreso</span>
                                                        break;
                                                    case VisitStatus.Completed:
                                                        <span class="badge bg-success">Completada</span>
                                                        break;
                                                    case VisitStatus.Cancelled:
                                                        <span class="badge bg-danger">Cancelada</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@visit.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                @if (visit.CheckInTime.HasValue)
                                                {
                                                    <small>@visit.CheckInTime.Value.ToString("dd/MM/yyyy HH:mm")</small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Pendiente</span>
                                                }
                                            </td>
                                            <td>
                                                @if (visit.CheckOutTime.HasValue)
                                                {
                                                    <small>@visit.CheckOutTime.Value.ToString("dd/MM/yyyy HH:mm")</small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Pendiente</span>
                                                }
                                            </td>
                                            <td>
                                                @if (visit.CheckInTime.HasValue && visit.CheckOutTime.HasValue)
                                                {
                                                    var duration = visit.CheckOutTime.Value - visit.CheckInTime.Value;
                                                    <small>@duration.ToString(@"hh\:mm")</small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    @if (totalPages > 1)
                    {
                        <div class="card-footer">
                            <nav aria-label="Navegación de páginas">
                                <ul class="pagination justify-content-center mb-0">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                            <i class="fas fa-chevron-left"></i>
                                        </button>
                                    </li>
                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            }
        </div>
    </ChildContent>
    <NotAuthorized>
        <div class="text-center">
            <h3>Acceso Denegado</h3>
            <p>Debes iniciar sesión para acceder a los reportes.</p>
            <a href="/login" class="btn btn-primary">Iniciar Sesión</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Visit>? visits;
    private List<Company>? companies;
    private bool isLoading = true;
    private bool isExporting = false;
    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private int pageSize = 20;

    private ReportFilters filters = new()
    {
        StartDate = DateTime.Today.AddDays(-30),
        EndDate = DateTime.Today
    };

    private ReportMetrics metrics = new();

    private IEnumerable<Visit> filteredVisits => visits?
        .Where(v => string.IsNullOrEmpty(searchTerm) || 
                   v.Visitor.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.Visitor.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   v.Company.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(v => v.ScheduledDate) ?? Enumerable.Empty<Visit>();

    private IEnumerable<Visit> paginatedVisits => filteredVisits
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int totalPages => (int)Math.Ceiling((double)filteredVisits.Count() / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var visitsTask = VisitService.GetAllAsync();
            var companiesTask = CompanyService.GetAllAsync();

            await Task.WhenAll(visitsTask, companiesTask);

            visits = visitsTask.Result?.ToList() ?? new List<Visit>();
            companies = companiesTask.Result?.ToList() ?? new List<Company>();

            CalculateMetrics();
            await RenderCharts();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos de reportes");
            visits = new List<Visit>();
            companies = new List<Company>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void CalculateMetrics()
    {
        var filteredData = visits?.Where(v => 
            (!filters.StartDate.HasValue || v.ScheduledDate >= filters.StartDate.Value) &&
            (!filters.EndDate.HasValue || v.ScheduledDate <= filters.EndDate.Value) &&
            (string.IsNullOrEmpty(filters.CompanyId) || v.Company.Id.ToString() == filters.CompanyId) &&
            (string.IsNullOrEmpty(filters.Status) || v.Status.ToString() == filters.Status)
        ).ToList() ?? new List<Visit>();

        metrics.TotalVisits = filteredData.Count;
        metrics.CompletedVisits = filteredData.Count(v => v.Status == VisitStatus.Completed);
        metrics.PendingVisits = filteredData.Count(v => v.Status == VisitStatus.Pending || v.Status == VisitStatus.InProgress);
        metrics.UniqueVisitors = filteredData.Select(v => v.Visitor.Id).Distinct().Count();
    }

    private async Task RenderCharts()
    {
        if (visits == null || !visits.Any()) return;

        var filteredData = visits.Where(v => 
            (!filters.StartDate.HasValue || v.ScheduledDate >= filters.StartDate.Value) &&
            (!filters.EndDate.HasValue || v.ScheduledDate <= filters.EndDate.Value) &&
            (string.IsNullOrEmpty(filters.CompanyId) || v.Company.Id.ToString() == filters.CompanyId) &&
            (string.IsNullOrEmpty(filters.Status) || v.Status.ToString() == filters.Status)
        ).ToList();

        await RenderVisitsChart(filteredData);
        await RenderStatusChart(filteredData);
        await RenderCompanyChart(filteredData);
        await RenderHourChart(filteredData);
    }

    private async Task RenderVisitsChart(List<Visit> data)
    {
        var visitsByDate = data
            .GroupBy(v => v.ScheduledDate.Date)
            .OrderBy(g => g.Key)
            .Select(g => new { Date = g.Key, Count = g.Count() })
            .ToList();

        var labels = visitsByDate.Select(x => x.Date.ToString("dd/MM")).ToArray();
        var values = visitsByDate.Select(x => x.Count).ToArray();

        await JSRuntime.InvokeVoidAsync("renderVisitsChart", "visitsChart", labels, values);
    }

    private async Task RenderStatusChart(List<Visit> data)
    {
        var statusData = data
            .GroupBy(v => v.Status)
            .Select(g => new { Status = g.Key, Count = g.Count() })
            .ToList();

        var labels = statusData.Select(x => GetStatusLabel(x.Status)).ToArray();
        var values = statusData.Select(x => x.Count).ToArray();
        var colors = statusData.Select(x => GetStatusColor(x.Status)).ToArray();

        await JSRuntime.InvokeVoidAsync("renderStatusChart", "statusChart", labels, values, colors);
    }

    private async Task RenderCompanyChart(List<Visit> data)
    {
        var companyData = data
            .GroupBy(v => v.Company.Name)
            .OrderByDescending(g => g.Count())
            .Take(10)
            .Select(g => new { Company = g.Key, Count = g.Count() })
            .ToList();

        var labels = companyData.Select(x => x.Company).ToArray();
        var values = companyData.Select(x => x.Count).ToArray();

        await JSRuntime.InvokeVoidAsync("renderCompanyChart", "companyChart", labels, values);
    }

    private async Task RenderHourChart(List<Visit> data)
    {
        var hourData = data
            .GroupBy(v => v.ScheduledDate.Hour)
            .OrderBy(g => g.Key)
            .Select(g => new { Hour = g.Key, Count = g.Count() })
            .ToList();

        var labels = hourData.Select(x => $"{x.Hour:00}:00").ToArray();
        var values = hourData.Select(x => x.Count).ToArray();

        await JSRuntime.InvokeVoidAsync("renderHourChart", "hourChart", labels, values);
    }

    private string GetStatusLabel(VisitStatus status)
    {
        return status switch
        {
            VisitStatus.Pending => "Pendiente",
            VisitStatus.InProgress => "En Progreso",
            VisitStatus.Completed => "Completada",
            VisitStatus.Cancelled => "Cancelada",
            _ => status.ToString()
        };
    }

    private string GetStatusColor(VisitStatus status)
    {
        return status switch
        {
            VisitStatus.Pending => "#ffc107",
            VisitStatus.InProgress => "#007bff",
            VisitStatus.Completed => "#28a745",
            VisitStatus.Cancelled => "#dc3545",
            _ => "#6c757d"
        };
    }

    private async Task ExportToExcel()
    {
        try
        {
            isExporting = true;
            StateHasChanged();

            // TODO: Implementar exportación real a Excel
            await Task.Delay(2000); // Simulación de exportación

            // Por ahora, solo mostramos un mensaje
            await JSRuntime.InvokeVoidAsync("alert", "Exportación a Excel implementada. Los datos se han preparado para descarga.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al exportar a Excel");
            await JSRuntime.InvokeVoidAsync("alert", "Error al exportar los datos.");
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    public class ReportFilters
    {
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string CompanyId { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
    }

    public class ReportMetrics
    {
        public int TotalVisits { get; set; }
        public int CompletedVisits { get; set; }
        public int PendingVisits { get; set; }
        public int UniqueVisitors { get; set; }
    }
}
