@page "/login"
@using Park.Web.Models
@using Park.Web.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILogger<Login> Logger

<PageTitle>Login - Sistema de Parque Industrial</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="row w-100 justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-lg border-0">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <h2 class="text-primary fw-bold">🚀 Park Industrial</h2>
                        <p class="text-muted">Sistema de Gestión</p>
                    </div>

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Usuario</label>
                            <InputText id="username" class="@(isLoading ? "form-control disabled" : "form-control")" 
                                     @bind-Value="loginModel.Username" disabled="@isLoading" />
                            <ValidationMessage For="@(() => loginModel.Username)" />
                        </div>

                        <div class="mb-4">
                            <label for="password" class="form-label">Contraseña</label>
                            <InputText type="password" id="password" class="@(isLoading ? "form-control disabled" : "form-control")" 
                                     @bind-Value="loginModel.Password" disabled="@isLoading" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @errorMessage
                            </div>
                        }

                        <button type="submit" class="@(isLoading ? "btn btn-primary w-100 disabled" : "btn btn-primary w-100")" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Iniciando sesión...</span>
                            }
                            else
                            {
                                <i class="fas fa-sign-in-alt me-2"></i>
                                <span>Iniciar Sesión</span>
                            }
                        </button>
                    </EditForm>

                    <div class="text-center mt-4">
                        <small class="text-muted">
                            Sistema de Gestión de Parque Industrial v1.0
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Esperar un momento para que el AuthService se inicialice
        await Task.Delay(100);
        
        // Si ya está autenticado, redirigir según el rol
        if (AuthService.IsAuthenticated)
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            
            if (currentUser?.Roles.Any(r => r.Name == "Guardia") == true)
            {
                Navigation.NavigateTo("/guardia");
            }
            else
            {
                Navigation.NavigateTo("/");
            }
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var response = await AuthService.LoginAsync(loginModel);
            
            if (response != null)
            {
                Logger.LogInformation("Usuario {Username} inició sesión exitosamente", loginModel.Username);
                
                // Obtener información del usuario actual para determinar el rol
                var currentUser = await AuthService.GetCurrentUserAsync();
                
                // Redirección basada en roles
                if (currentUser?.Roles.Any(r => r.Name == "Guardia") == true)
                {
                    Logger.LogInformation("Usuario {Username} es Guardia, redirigiendo a panel de guardia", loginModel.Username);
                    Navigation.NavigateTo("/guardia");
                }
                else
                {
                    Logger.LogInformation("Usuario {Username} redirigido al dashboard", loginModel.Username);
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                errorMessage = "Usuario o contraseña incorrectos. Por favor, intente nuevamente.";
                Logger.LogWarning("Intento de login fallido para usuario: {Username}", loginModel.Username);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al conectar con el servidor. Por favor, intente nuevamente.";
            Logger.LogError(ex, "Error durante el login para usuario: {Username}", loginModel.Username);
        }
        finally
        {
            isLoading = false;
        }
    }
}
